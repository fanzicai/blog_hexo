{"meta":{"title":"fanzi.home@web","subtitle":"凡尘博客","description":"凡尘过客今他乡，子若布衣奈何天","author":"fanzi.cai","url":"http://my.fanzicai.com"},"pages":[{"title":"","date":"2023-02-23T09:21:06.733Z","updated":"2023-02-23T09:21:06.733Z","comments":true,"path":"404.html","permalink":"http://my.fanzicai.com/404.html","excerpt":"","text":"404"},{"title":"Categories","date":"2023-02-23T09:21:06.757Z","updated":"2023-02-23T09:21:06.757Z","comments":true,"path":"categories/index.html","permalink":"http://my.fanzicai.com/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2016-08-15T09:24:11.000Z","updated":"2023-02-23T09:21:06.754Z","comments":true,"path":"about/index.html","permalink":"http://my.fanzicai.com/about/index.html","excerpt":"","text":""},{"title":"Tags","date":"2023-02-23T09:21:06.757Z","updated":"2023-02-23T09:21:06.757Z","comments":true,"path":"tags/index.html","permalink":"http://my.fanzicai.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"docker容器动态扩容","slug":"docker容器动态扩容","date":"2019-08-08T03:05:59.000Z","updated":"2023-02-23T09:21:06.754Z","comments":false,"path":"Program/20190808-docker容器动态扩容.html","link":"","permalink":"http://my.fanzicai.com/Program/20190808-docker容器动态扩容.html","excerpt":"Docker采用DeviceMapper作为存储驱动时，一般默认容器大小不超过10G。 本文适用于使用DeviceMapper的Docker版本，不适于与其他如Overlay2的版本。","text":"Docker采用DeviceMapper作为存储驱动时，一般默认容器大小不超过10G。 本文适用于使用DeviceMapper的Docker版本，不适于与其他如Overlay2的版本。 先获取容器对应的磁盘映射空间1df 得到1docker-253:0-4294967424-e8e2398e70742a18a0affbc894dbc853432b7c0ef1db4a86e2a070ea0b57c879 获取扇区信息12dmsetup table docker-253:0-4294967424-e8e2398e70742a18a0affbc894dbc853432b7c0ef1db4a86e2a070ea0b57c8790 10971520 thin 253:3 32 编写脚本gitlab_resume.sh123#!/bin/bashecho 0 104857600 thin 253:3 32 | dmsetup load docker-253:0-4294967424-e8e2398e70742a18a0affbc894dbc853432b7c0ef1db4a86e2a070ea0b57c879dmsetup resume docker-253:0-4294967424-e8e2398e70742a18a0affbc894dbc853432b7c0ef1db4a86e2a070ea0b57c879","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"CentOS","slug":"CentOS","permalink":"http://my.fanzicai.com/tags/CentOS/"},{"name":"Docker","slug":"Docker","permalink":"http://my.fanzicai.com/tags/Docker/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"Win7-x64环境虚拟机安装OS/X-10.11","slug":"Win7-x64环境虚拟机安装OS-X-10-11","date":"2017-02-15T08:33:07.000Z","updated":"2023-02-23T09:21:06.754Z","comments":false,"path":"Program/20170215-Win7-x64环境虚拟机安装OS-X-10-11.html","link":"","permalink":"http://my.fanzicai.com/Program/20170215-Win7-x64环境虚拟机安装OS-X-10-11.html","excerpt":"本文描述在Windows7 64系统上的VMware虚拟环境中安装OS/X的10.11操作系统。","text":"本文描述在Windows7 64系统上的VMware虚拟环境中安装OS/X的10.11操作系统。 1.工具 VMware 12 unlocker 207 cdr格式的OS/X安装包 2.关键步骤 unlocker 207 安装前，确保VMware已关闭采用“管理员”执行.cmd文件安装成功，在VMware的新建列表中会出现Apple OS选项 新建虚拟机 选用EFI，非BIOS内存不少于2048，建议4096硬盘不少于40G，建议80，可选用SATA，不要求SCSI直接选择cdr文件USB设备设置时，勾选“显示所有USB设备”，并采用USB2.0开启虚拟机之前，编辑vmx文件，添加一行配置 1smc.version = 0 系统安装 安装时，需先进行磁盘初始化，在“实用工具”-“硬盘工具”中进行键盘布局，选择“美国（PC）”","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"2017","slug":"2017","permalink":"http://my.fanzicai.com/tags/2017/"},{"name":"VMware","slug":"VMware","permalink":"http://my.fanzicai.com/tags/VMware/"},{"name":"OS/X","slug":"OS-X","permalink":"http://my.fanzicai.com/tags/OS-X/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"docker访问主机目录设置","slug":"docker访问主机目录设置","date":"2016-11-08T03:27:08.000Z","updated":"2023-02-23T09:21:06.754Z","comments":false,"path":"Program/20161108-docker访问主机目录设置.html","link":"","permalink":"http://my.fanzicai.com/Program/20161108-docker访问主机目录设置.html","excerpt":"Docker映射宿主机目录时，须配置该目录权限，否则在SELinux下无法访问。","text":"Docker映射宿主机目录时，须配置该目录权限，否则在SELinux下无法访问。 配置方式1chcon -Rt svirt_sandbox_file_t /my/own/datadir","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"Docker","slug":"Docker","permalink":"http://my.fanzicai.com/tags/Docker/"},{"name":"SELinux","slug":"SELinux","permalink":"http://my.fanzicai.com/tags/SELinux/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"docker国内镜像","slug":"docker国内镜像","date":"2016-11-08T03:05:59.000Z","updated":"2023-02-23T09:21:06.754Z","comments":false,"path":"Program/20161108-docker国内镜像.html","link":"","permalink":"http://my.fanzicai.com/Program/20161108-docker国内镜像.html","excerpt":"目前因为某些原因，docker pull采用默认镜像地址时非常慢，故建议选用国内镜像。","text":"目前因为某些原因，docker pull采用默认镜像地址时非常慢，故建议选用国内镜像。 本文选用了比较方便的阿里云镜像1https://eoomcem8.mirror.aliyuncs.com 在CentOS7中，修改文件/etc/sysconfig/config，option增加下述内容1--registry-mirror=https://eoomcem8.mirror.aliyuncs.com","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"CentOS","slug":"CentOS","permalink":"http://my.fanzicai.com/tags/CentOS/"},{"name":"Docker","slug":"Docker","permalink":"http://my.fanzicai.com/tags/Docker/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"CentOS中MySQL远程访问","slug":"CentOS中MySQL远程访问","date":"2016-11-01T02:50:52.000Z","updated":"2023-02-23T09:21:06.754Z","comments":false,"path":"Program/20161101-CentOS中MySQL远程访问.html","link":"","permalink":"http://my.fanzicai.com/Program/20161101-CentOS中MySQL远程访问.html","excerpt":"本文描述如何在CentOS7中允许MySQL的端口。","text":"本文描述如何在CentOS7中允许MySQL的端口。 1、方法一1firewall-cmd --add-service=mysql 永久改变1firewall-cmd --permanent --add-service=mysql 2、方法二采用iptables，前提是要先安装iptables相关 相关命令有添加端口33061iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT 查看状态1iptables -L -n //或者 service iptables status 删除端口1iptables -D INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT 永久保存1service iptables save 或者 1/etc/init.d/iptables save 或者编辑配置文件 12vi /etc/sysconfig/iptables //在该文件中加入下面这条规则也是可以生效的 -A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://my.fanzicai.com/tags/MySQL/"},{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"Firewall","slug":"Firewall","permalink":"http://my.fanzicai.com/tags/Firewall/"},{"name":"Iptables","slug":"Iptables","permalink":"http://my.fanzicai.com/tags/Iptables/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"openssl证书格式转换","slug":"openssl证书格式转换","date":"2016-11-01T01:08:00.000Z","updated":"2023-02-23T09:21:06.754Z","comments":false,"path":"Program/20161101-openssl证书格式转换.html","link":"","permalink":"http://my.fanzicai.com/Program/20161101-openssl证书格式转换.html","excerpt":"本文描述ssl key的格式转换方法。","text":"本文描述ssl key的格式转换方法。 1、基本命令1openssl x509 -in cert.pem -inform PEM -out cert.der -outform DER","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"OpenSSL","slug":"OpenSSL","permalink":"http://my.fanzicai.com/tags/OpenSSL/"},{"name":"X509","slug":"X509","permalink":"http://my.fanzicai.com/tags/X509/"},{"name":"Der","slug":"Der","permalink":"http://my.fanzicai.com/tags/Der/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"Tomcat配置https","slug":"Tomcat配置https","date":"2016-10-31T06:48:44.000Z","updated":"2023-02-23T09:21:06.750Z","comments":false,"path":"Program/20161031-Tomcat配置https.html","link":"","permalink":"http://my.fanzicai.com/Program/20161031-Tomcat配置https.html","excerpt":"本文描述Tomcat配置https连接的方式之一。","text":"本文描述Tomcat配置https连接的方式之一。 1、Key生成 生成ssh key 1$JAVA_HOME/bin/keytool -genkey -alias tomcat -keyalg RSA -keystore /path/to/my/keystore 2、配置 /conf/server.xml 1234&lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot; maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; scheme=&quot;https&quot; secure=&quot;true&quot; keystoreFile=&quot;$&#123;user.home&#125;/.keystore&quot; keystorePass=&quot;changeit&quot; clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; /&gt;","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"Tomcat","slug":"Tomcat","permalink":"http://my.fanzicai.com/tags/Tomcat/"},{"name":"SSL","slug":"SSL","permalink":"http://my.fanzicai.com/tags/SSL/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"GitLab自动备份by crond","slug":"GitLab自动备份by-crond","date":"2016-08-09T05:54:08.000Z","updated":"2023-02-23T09:21:06.750Z","comments":false,"path":"Program/20160809-GitLab自动备份by-crond.html","link":"","permalink":"http://my.fanzicai.com/Program/20160809-GitLab自动备份by-crond.html","excerpt":"本文涉及的GitLab为中文版，采用fanzi/gitlab-cn创建。可参见Dockerfile之fanzi/gitlab-cn","text":"本文涉及的GitLab为中文版，采用fanzi/gitlab-cn创建。可参见Dockerfile之fanzi/gitlab-cn 1. 备份 在旧GitLab服务器上执行 12cd /home/git/gitlabbundle exec rake gitlab:backup:create RAILS_ENV=production 备份文件所在目录 1cd /home/git/gitlab/tmp/backups/ 2. 还原 将原GitLab服务器的备份文件（*.tar）拷贝到新GitLab服务器的备份目录（同旧服务器）重要！修改脚本文件1vim /home/git/gitlab/lib/tasks/gitlab/db.rask 将1tables.each &#123; |t| connection.execute(&quot;DROP TABLE IF EXISTS #&#123;t&#125; CASCADE&quot;) &#125; 改为1tables.each &#123; |t| connection.execute(&quot;DROP TABLE IF EXISTS `#&#123;t&#125;` CASCADE&quot;) &#125; 还原命令12cd /home/git/gitlabsudo -u git -H bundle exec rake gitlab:backup:restore RAILS_ENV=production 执行还原命令之前，须执行初始化并关闭gitlab服务12docker exec -it gitlab-new /bin/bash -c /home/git/gitlab-init.sh/etc/init.d/gitlab stop 3. 附录 docker mysql 1docker run --restart always --name mysql-new -e MYSQL_ROOT_PASSWORD=123 -d mysql/mysql-server:latest --character-set-server=utf8 --collation-server=utf8_general_ci 进入mysql控制台12docker exec -it mysql-new /bin/bashmysql -uroot -p123 创建git用户及database，本文git用户密码设置为git12345CREATE USER &apos;git&apos;@&apos;%&apos; IDENTIFIED BY &apos;git&apos;;CREATE DATABASE IF NOT EXISTS `gitlabhq_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, CREATE TEMPORARY TABLES, DROP, INDEX, ALTER, LOCK TABLES ON `gitlabhq_production`.* TO &apos;git&apos;@&apos;%&apos;;flush privileges;\\q docker gitlab 1docker run -it --detach --restart always --link mysql-new:mysql -p 80:80 -p 22:22 --name gitlab-new fanzi/gitlab-cn 4. 自动化 docker gitlab backup脚本 /home/git/gitlab-backup.sh 123#!/bin/bashcd /home/git/gitlabbundle exec rake gitlab:backup:create RAILS_ENV=production crond配置文件 /root/docker-gitlab-bak/gitlab.cron 1234567891011121314SHELL=/bin/bashPATH=/sbin:/bin:/usr/sbin:/usr/binMAILTO=root# For details see man 4 crontabs# Example of job definition:# .---------------- minute (0 - 59)# | .------------- hour (0 - 23)# | | .---------- day of month (1 - 31)# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# | | | | |# * * * * * user-name command to be executed0 0 * * * docker exec -it gitlab /bin/bash /home/git/gitlab-backup.sh10 0 * * * docker cp gitlab:/home/git/gitlab/tmp/backups /root/docker-gitlab-bak/ crond服务 123crontab -s /root/docker-gitlab-bak/gitlab.cronsystemctl enable crondsystemctl start crond 5. 其他方式 主要指采用安装包安装的gitlab12/opt/gitlab/bin/gitlab-rake gitlab:backup:creategitlab-rake gitlab:backup:restore BACKUP=******* #编号","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"GitLab","slug":"GitLab","permalink":"http://my.fanzicai.com/tags/GitLab/"},{"name":"Crond","slug":"Crond","permalink":"http://my.fanzicai.com/tags/Crond/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"GitHub和Jekyll搭建静态博客","slug":"GitHub和Jekyll搭建静态博客","date":"2016-08-03T09:07:27.000Z","updated":"2023-02-23T09:21:06.750Z","comments":false,"path":"Program/20160803-GitHub和Jekyll搭建静态博客.html","link":"","permalink":"http://my.fanzicai.com/Program/20160803-GitHub和Jekyll搭建静态博客.html","excerpt":"根据官方教程进行搭建，https://help.github.com/articles/setting-up-your-github-pages-site-locally-with-jekyll/。","text":"根据官方教程进行搭建，https://help.github.com/articles/setting-up-your-github-pages-site-locally-with-jekyll/。 1. 官方教程 根据官方教程安装ruby、bundle创建blog_jekyll目录初始化jekyll工程 2. Jekyll配置 _config.yml12345678910title: fanzi.home@webemail: fanzicai@yahoo.comdescription: &gt; # this means to ignore newlines until &quot;baseurl:&quot; nothing to say.baseurl: &quot;/blog_jekyll&quot; # the subpath of your site, e.g. /blogurl: &quot;https://www.fanzicai.com&quot; # the base hostname &amp; protocol for your site#twitter_username: jekyllrbgithub_username: fanzicai# Build settingsmarkdown: kramdown 3. GitHub配置 repoblog_jekyll1git push --set-upstream origin gh-pages 注意，git推送时，需把.gitconfig中的_site删除 访问https://fanzicai.github.io/blog_jekyll","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"GitHub","slug":"GitHub","permalink":"http://my.fanzicai.com/tags/GitHub/"},{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"Jekyll","slug":"Jekyll","permalink":"http://my.fanzicai.com/tags/Jekyll/"},{"name":"Ruby","slug":"Ruby","permalink":"http://my.fanzicai.com/tags/Ruby/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"CentOS安装Erlang和RabbitMQ","slug":"CentOS安装Erlang和RabbitMQ","date":"2016-08-02T08:27:15.000Z","updated":"2023-02-23T09:21:06.750Z","comments":false,"path":"Program/20160802-CentOS安装Erlang和RabbitMQ.html","link":"","permalink":"http://my.fanzicai.com/Program/20160802-CentOS安装Erlang和RabbitMQ.html","excerpt":"本文描述esl-erlang、esl-erlang-compat、rabbitmq-server的安装。","text":"本文描述esl-erlang、esl-erlang-compat、rabbitmq-server的安装。 AMQP, Advanced Message Queuing Protocol，高级消息队列协议。 1. 安装Erlang 安装epel-release 1rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm 安装Erlang 编辑/etc/yum.repos.d/erlang.repo，增加内容 123456[erlang-solutions]name=Centos 7 - x86_64 - Erlang Solutionsbaseurl=https://packages.erlang-solutions.com/rpm/centos/7/x86_64gpgcheck=1gpgkey=https://packages.erlang-solutions.com/rpm/erlang_solutions.ascenabled=1 123yum update -yyum install -y esl-erlangrpm -ivh http://www.rabbitmq.com/releases/erlang/esl-erlang-compat-18.1-1.noarch.rpm 2.安装RabbitMQ 安装socat 1yum install -y socat 安装rabbitmq 1rpm -ivh http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.4/rabbitmq-server-3.6.4-1.noarch.rpm 启动 12systemctl enable rabbitmq-serversystemctl start rabbitmq-server 3.启用Web-Plugin RabbitMQ management 12rabbitmq-plugins enable rabbitmq_managementsystemctl restart rabbitmq-server 防火墙端口 12firewall-cmd --permanent --zone=public --add-port=15672/tcpfirewall-cmd --reload 本地用户 用户名guest，密码guest无法远程登录 远程用户 123rabbitmqctl add_user fanzi 123rabbitmqctl set_permissions -p &quot;/&quot; fanzi &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;rabbitmqctl set_user_tags fanzi administrator","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"CentOS","slug":"CentOS","permalink":"http://my.fanzicai.com/tags/CentOS/"},{"name":"Erlang","slug":"Erlang","permalink":"http://my.fanzicai.com/tags/Erlang/"},{"name":"RabbitMQ","slug":"RabbitMQ","permalink":"http://my.fanzicai.com/tags/RabbitMQ/"},{"name":"AMQP","slug":"AMQP","permalink":"http://my.fanzicai.com/tags/AMQP/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"V5Max优化GPS设置","slug":"V5Max优化GPS设置","date":"2016-07-29T08:19:15.000Z","updated":"2023-02-23T09:21:06.750Z","comments":false,"path":"Phone/20160729-V5Max优化GPS设置.html","link":"","permalink":"http://my.fanzicai.com/Phone/20160729-V5Max优化GPS设置.html","excerpt":"ZTE V5Max默认配置下搜星贼慢，故优化配置，主要两个文件gps.conf和apns-conf.xml。","text":"ZTE V5Max默认配置下搜星贼慢，故优化配置，主要两个文件gps.conf和apns-conf.xml。 1. 前提文件均在system/etc目录下，须root权限才能操作，常用RE管理器 root推荐360一键root工具 2. gps.conf 文件修改后为1234567891011121314151617181920212223242526272829303132333435XTRA_SERVER_1=http://xtra2.gpsonextra.net/xtra.binXTRA_SERVER_2=http://xtra1.gpsonextra.net/xtra.binXTRA_SERVER_3=http://xtra3.gpsonextra.net/xtra.binERR_ESTIMATE=0NTP_SERVER=0.cn.pool.ntp.orgNTP_SERVER=1.cn.pool.ntp.orgNTP_SERVER=2.cn.pool.ntp.orgNTP_SERVER=3.cn.pool.ntp.orgNTP_SERVER=cn.pool.ntp.orgDEBUG_LEVEL = 3INTERMEDIATE_POS=0SUPL_VER=0x20000SUPL_ES=1CAPABILITIES=0x31SUPL_HOST=suplcn.sirf.comSUPL_HOST=221.176.0.55SUPL_HOST=supl.nokia.comSUPL_PORT=7275# SUPL_HOST=supl.google.com# SUPL_PORT=7276LPP_PROFILE = 0NMEA_PROVIDER=0SGLTE_TARGET=0A_GLONASS_POS_PROTOCOL_SELECT = 0 3. apns-conf.xml 将type=”default”改为type=”default,supl”","categories":[{"name":"Phone","slug":"Phone","permalink":"http://my.fanzicai.com/categories/Phone/"}],"tags":[{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"V5Max","slug":"V5Max","permalink":"http://my.fanzicai.com/tags/V5Max/"},{"name":"ZTE","slug":"ZTE","permalink":"http://my.fanzicai.com/tags/ZTE/"},{"name":"Phone","slug":"Phone","permalink":"http://my.fanzicai.com/tags/Phone/"}],"keywords":[{"name":"Phone","slug":"Phone","permalink":"http://my.fanzicai.com/categories/Phone/"}]},{"title":"CentOS设置多IP的方法","slug":"CentOS设置多IP的方法","date":"2016-07-29T03:19:44.000Z","updated":"2023-02-23T09:21:06.750Z","comments":false,"path":"Program/20160729-CentOS设置多IP的方法.html","link":"","permalink":"http://my.fanzicai.com/Program/20160729-CentOS设置多IP的方法.html","excerpt":"本文描述在CentOS7中单网卡配置多IP的情况，包括非连续IP和连续IP段。","text":"本文描述在CentOS7中单网卡配置多IP的情况，包括非连续IP和连续IP段。 以网卡eno1为例原配置文件为1/etc/sysconfig/network-scripts/ifcfg-eno1 1. 非连续IP 新增配置文件123/etc/sysconfig/network-scripts/ifcfg-eno1:0/etc/sysconfig/network-scripts/ifcfg-eno1:1/etc/sysconfig/network-scripts/ifcfg-eno1:3 配置文件内容 123456789#/etc/sysconfig/network-scripts/ifcfg-eno1:0BOOTPROTO=staticDEFROUTE=yesDEVICE=eno1:0ONBOOT=yesIPADDR=192.168.1.10PREFIX=24GATEWAY=192.168.1.1DNS1=192.168.1.1 2. 连续IP段 新增配置文件1/etc/sysconfig/network-scripts/ifcfg-eno1-range0 配置文件内容123456789BOOTPROTO=staticDEVICE=eno1ONBOOT=yesIPADDR_START=192.168.1.20IPADDR_END=192.168.1.39PREFIX=24GATEWAY=192.168.1.1DNS1=192.168.1.1CLONENUM_START=3 #为起始编号，前面已用0、1、2，故此处为3","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"CentOS","slug":"CentOS","permalink":"http://my.fanzicai.com/tags/CentOS/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"Eclipse中配置Git和SSH","slug":"Eclipse中配置Git和SSH","date":"2016-07-26T07:09:16.000Z","updated":"2023-02-23T09:21:06.747Z","comments":false,"path":"Program/20160726-Eclipse中配置Git和SSH.html","link":"","permalink":"http://my.fanzicai.com/Program/20160726-Eclipse中配置Git和SSH.html","excerpt":"Eclipse中使用Git进行Team协同。","text":"Eclipse中使用Git进行Team协同。 1. Git Plug-in 默认情况下，Eclipse已经安装了Git插件，一般为EGit或JGit。直接使用即可。 2. Git配置 系统环境变量1HOME = /.gitconfig目录 Eclipse配置Team - Git - Configuration1234key - user.namevalue - fanzikey - user.emailvalue - fanzicai@yahoo.com Eclipse配置General - Network Connections - SSH2 SSH2 home = /git目录/.ssh # 一般为gitlab或github等的私钥存放地 Key Management #如有现成私钥，则导入，如无则创建，同时把公钥上传到git服务器 使用时，采用ssh访问 git@gitlab.com/***.git方式","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"Git","slug":"Git","permalink":"http://my.fanzicai.com/tags/Git/"},{"name":"Eclipse","slug":"Eclipse","permalink":"http://my.fanzicai.com/tags/Eclipse/"},{"name":"SSH","slug":"SSH","permalink":"http://my.fanzicai.com/tags/SSH/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"Bind-chroot部署DNS服务器","slug":"Bind-chroot部署DNS服务器","date":"2016-07-20T05:49:06.000Z","updated":"2023-02-23T09:21:06.747Z","comments":false,"path":"Program/20160720-Bind-chroot部署DNS服务器.html","link":"","permalink":"http://my.fanzicai.com/Program/20160720-Bind-chroot部署DNS服务器.html","excerpt":"CentOS 7部署DNS内网服务器，采用bind-chroot工具。","text":"CentOS 7部署DNS内网服务器，采用bind-chroot工具。 1. 安装工具 bind-utils 1yum -y install bind-utils 2. 修改配置 涉及目录有123456/var/named/chroot/etc/ named.conf named.rfc1912.zones/var/named/chroot/var/named/ nid.com.zone 1.168.192.local named.conf1cp -f /etc/named.conf /var/named/chroot/etc/ 12345678910111213options &#123; listen-on port 53 &#123; 192.168.1.183; &#125;; ... allow-query &#123; any; &#125;; recursion yes; dnssec-enable no; dnssec-validation no; ... named.rfc1912.zones 添加内容 1234567891011zone &quot;nid.com&quot; IN &#123; type master; file &quot;nid.com.zone&quot;; allow-update &#123;none;&#125;;&#125;;zone &quot;1.168.192.in-addr.arpa&quot; IN &#123; type master; file &quot;1.168.192.local&quot;; allow-update &#123;none;&#125;;&#125;; nid.com.zone 1234567891011121314$TTL 86400@ IN SOA nid.com. mail.nid.com. ( 46 ; serial 43200 ; refresh 3600 ; retry 3600000 ; expire 2592000 ) ; minimum IN NS www.nid.com. IN A 192.168.1.200www IN A 192.168.1.200gitlab IN A 192.168.1.10jenkins IN A 192.168.1.80nginx IN A 192.168.1.200tomcat IN A 192.168.1.80 1.168.192.local 12345678910111213$TTL 86400@ IN SOA nid.com. mail.nid.com. ( 45 ; serial 28800 ; refresh 14400 ; retry 36000000 ; expire 86400 ) ; minimum IN NS www.nid.com.200 IN PTR www.nid.com.10 IN PTR gitlab.nid.com80 IN PTR jenkins.nid.comwww IN A 192.168.1.200 /etc/resolv.conf 12nameserver 192.168.1.183nameserver 192.168.1.1 其中，192.168.1.183为DNS服务器的IP 3. 启动DNS 123/usr/libexec/setup-named-chroot.sh /var/named/chroot onsystemctl enable named-chrootsystemctl start named-chroot 4. 测试 采用nslookupserver 查看DNS服务器列表www.nid.com 查看该域名的ip","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"CentOS","slug":"CentOS","permalink":"http://my.fanzicai.com/tags/CentOS/"},{"name":"Bind","slug":"Bind","permalink":"http://my.fanzicai.com/tags/Bind/"},{"name":"Chroot","slug":"Chroot","permalink":"http://my.fanzicai.com/tags/Chroot/"},{"name":"DNS","slug":"DNS","permalink":"http://my.fanzicai.com/tags/DNS/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"个人域名绑定GitHub Pages","slug":"个人域名绑定GitHub-Pages","date":"2016-06-13T08:52:37.000Z","updated":"2023-02-23T09:21:06.747Z","comments":false,"path":"Program/20160613-个人域名绑定GitHub-Pages.html","link":"","permalink":"http://my.fanzicai.com/Program/20160613-个人域名绑定GitHub-Pages.html","excerpt":"GitHub Pages提供了最多1GB的免费空间，适用于静态页面，如博客等。凡尘 博客亦即采用该方式，并且使用了hexo发布博客。","text":"GitHub Pages提供了最多1GB的免费空间，适用于静态页面，如博客等。凡尘 博客亦即采用该方式，并且使用了hexo发布博客。 1. 解析设置 在域名提供商处，对域名进行解析比如www.fanzicai.com解析地址可为下列地址之一12192.30.252.153192.30.252.154 2. GitHub设置 fanzicai.github.io的repo中根目录增加文件CNAMECNAME的内容为1www.fanzicai.com 使用Hexo deploy时，会把服务端的CNAME冲掉 3. Hexo 在source目录下，创建CNAME即可","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"GitHub","slug":"GitHub","permalink":"http://my.fanzicai.com/tags/GitHub/"},{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"Windows下更改GitBash默认路径","slug":"Windows下更改GitBash默认路径","date":"2016-06-13T01:22:54.000Z","updated":"2023-02-23T09:21:06.747Z","comments":false,"path":"Program/20160613-Windows下更改GitBash默认路径.html","link":"","permalink":"http://my.fanzicai.com/Program/20160613-Windows下更改GitBash默认路径.html","excerpt":"运行Git Bash后，控制台会进入默认路径（目录）。Git安装后，默认路径为用户目录。","text":"运行Git Bash后，控制台会进入默认路径（目录）。Git安装后，默认路径为用户目录。 Git Bash默认路径 方法一 Git Bash快捷方式的属性中，有一项配置“起始位置”，改为所需目录即可通常情况下，该方法无效，故采用方法二 方法二 Git安装目录下，如“D:\\Program Files\\Git\\etc”，找到profile文件，增加以下内容 1234HOME=&quot;所要设置的起始目录&quot;HOME=&quot;$(cd &quot;$HOME&quot; ; pwd)&quot;cdexport PATH=&quot;$HOME/bin:$PATH&quot; 本文使用的Git版本是2.8.2。","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"http://my.fanzicai.com/tags/Windows/"},{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"Git","slug":"Git","permalink":"http://my.fanzicai.com/tags/Git/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"TortoiseGit连接Gitlab","slug":"TortoiseGit连接Gitlab","date":"2016-06-08T08:03:36.000Z","updated":"2023-02-23T09:21:06.747Z","comments":false,"path":"Program/20160608-TortoiseGit连接Gitlab.html","link":"","permalink":"http://my.fanzicai.com/Program/20160608-TortoiseGit连接Gitlab.html","excerpt":"docker gitlab部署完成后，准备采用git bash和TortoiseGit连接gitlab。","text":"docker gitlab部署完成后，准备采用git bash和TortoiseGit连接gitlab。 Git Bash连接 密钥生成 git bash 1ssh-keygen -t rsa -C &quot;fanzicai@yahoo.com&quot; path_to_key_~/.ssh 自动生成id_rsa和id_rsa.pub 密钥上传 将id_rsa.pub的数据添加到gitlab的ssh key TortoiseGit连接 格式转换 采用TortoiseGit的工具PuTTYgen1、先”Load”上文的id_rsa2、再”Save private key”存成ppk格式 PuTTY设置 设置gitlab服务器的连接，并存储在Connection-&gt;SSH-&gt;Auth中添加上文ppk文件 Pageant设置 启动Pageant，添加ppk文件的key","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"GitLab","slug":"GitLab","permalink":"http://my.fanzicai.com/tags/GitLab/"},{"name":"Git","slug":"Git","permalink":"http://my.fanzicai.com/tags/Git/"},{"name":"TortoiseGit","slug":"TortoiseGit","permalink":"http://my.fanzicai.com/tags/TortoiseGit/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"git clone指定非22端口号","slug":"git-clone指定非22端口号","date":"2016-06-08T01:32:17.000Z","updated":"2023-02-23T09:21:06.747Z","comments":false,"path":"Program/20160608-git-clone指定非22端口号.html","link":"","permalink":"http://my.fanzicai.com/Program/20160608-git-clone指定非22端口号.html","excerpt":"git clone项目时，采用ssh协议时，一般远端均是22端口。部署docker时，考虑端口映射成其他，如2222。","text":"git clone项目时，采用ssh协议时，一般远端均是22端口。部署docker时，考虑端口映射成其他，如2222。 22端口 1git clone git@hostname:repos/test.git 非22端口 1git clone ssh://git@hostname:2222/repos/test.git 修改默认端口 编辑~/.ssh/config 12345Host *** Hostname *** User *** Port 2222 IdentifyFile ~/.ssh/***","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"Git","slug":"Git","permalink":"http://my.fanzicai.com/tags/Git/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"CentOS7下设置时区方式","slug":"CentOS7下设置时区方式","date":"2016-06-08T01:20:25.000Z","updated":"2023-02-23T09:21:06.743Z","comments":false,"path":"Program/20160608-CentOS7下设置时区方式.html","link":"","permalink":"http://my.fanzicai.com/Program/20160608-CentOS7下设置时区方式.html","excerpt":"时间的设置，通常采用date命令，很容易就能达到目的。最近在使用docker centos时，默认时区一般是美国，想要改变成北京时间。","text":"时间的设置，通常采用date命令，很容易就能达到目的。最近在使用docker centos时，默认时区一般是美国，想要改变成北京时间。 查看时区 1date -R 修改时区 1cp -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"CentOS","slug":"CentOS","permalink":"http://my.fanzicai.com/tags/CentOS/"},{"name":"Docker","slug":"Docker","permalink":"http://my.fanzicai.com/tags/Docker/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"Dockerfile之fanzi/gitlab-cn","slug":"Dockerfile之fanzi-gitlab-cn","date":"2016-06-02T01:02:37.000Z","updated":"2023-02-23T09:37:48.966Z","comments":false,"path":"Program/20160602-Dockerfile之fanzi-gitlab-cn.html","link":"","permalink":"http://my.fanzicai.com/Program/20160602-Dockerfile之fanzi-gitlab-cn.html","excerpt":"Dockerfile是创建docker image的一种常用方式。本文采用dockerfile创建gitlab-cn image。该image基于Centos Image 7创建，并与mysql image联合使用。","text":"Dockerfile是创建docker image的一种常用方式。本文采用dockerfile创建gitlab-cn image。该image基于Centos Image 7创建，并与mysql image联合使用。 1. 准备工作可参考CentOS7上安装Docker及GitLab一文，先行安装CentOS、Docker。 Docker MySQLOracle官方已提供MySQL的Docker Image。 docker -v 权限 1chcon -Rt svirt_sandbox_file_t /root/docker-mysql-data 创建1docker run --restart always --name mysql -e MYSQL_ROOT_PASSWORD=123 -v /root/docker-mysql-data:/var/lib/mysql -p 3306:3306 -p 33060:33060 -d mysql/mysql-server:5.7 --character-set-server=utf8 --collation-server=utf8_general_ci 进入mysql控制台12docker exec -it mysql /bin/bashmysql -uroot -p123 创建git用户及database，本文git用户密码设置为git12345CREATE USER &apos;git&apos;@&apos;%&apos; IDENTIFIED BY &apos;git&apos;;CREATE DATABASE IF NOT EXISTS `gitlabhq_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, CREATE TEMPORARY TABLES, DROP, INDEX, ALTER, LOCK TABLES ON `gitlabhq_production`.* TO &apos;git&apos;@&apos;%&apos;;flush privileges;\\q 2. gitlab-cn Dockerfile以下为Dockfile的内容123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112FROM centos:centos7MAINTAINER fanzi &quot;fanzicai@yahoo.com&quot;RUN yum -y install wget \\ &amp;&amp; wget http://repo.mysql.com//mysql57-community-release-el7-8.noarch.rpm \\ &amp;&amp; rpm -Uvh mysql57-community-release-el7-8.noarch.rpm \\ &amp;&amp; yum -y update \\ &amp;&amp; yum -y group install &quot;development tools&quot; \\ &amp;&amp; yum -y install epel-release \\ &amp;&amp; yum -y install sudo vim cmake mysql mysql-devel openssh-server go ruby redis nodejs nginx readline-devel gdbm-devel openssl-devel expat-devel sqlite-devel libyaml-devel libffi-devel libxml2-devel libxslt-devel libicu-devel python-devel xmlto logwatch perl-ExtUtils-CBuilderRUN adduser --system --shell /bin/bash --comment &apos;GitLab&apos; --create-home --home-dir /home/git/ git \\ &amp;&amp; chmod -R go+rx /home/gitWORKDIR /home/gitRUN wget https://www.kernel.org/pub/software/scm/git/git-2.8.3.tar.gz \\ &amp;&amp; wget https://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.1.tar.gz \\ &amp;&amp; wget https://storage.googleapis.com/golang/go1.5.3.linux-amd64.tar.gz \\ &amp;&amp; wget https://gitlab.com/larryli/gitlab/repository/archive.tar.gz?ref=v8.8.0.zh1 \\ &amp;&amp; tar xvf git-2.8.3.tar.gz \\ &amp;&amp; tar xvf ruby-2.3.1.tar.gz \\ &amp;&amp; tar xvf go1.5.3.linux-amd64.tar.gz -C /usr/local/ \\ &amp;&amp; tar xvf archive.tar.gz?ref=v8.8.0.zh1 \\ &amp;&amp; mv gitlab-v8.8.0.zh1* gitlab \\ &amp;&amp; ln -sf /usr/local/go/bin/&#123;go,godoc,gofmt&#125; /usr/bin/ \\# Git install &amp;&amp; cd git-2.8.3 \\ &amp;&amp; ./configure --prefix=/usr \\ &amp;&amp; make \\ &amp;&amp; make install \\ sudo -u git -H &quot;/usr/bin/git&quot; config --global core.autocrlf &quot;input&quot; \\# Ruby update &amp;&amp; cd ../ruby-2.3.1/ \\ &amp;&amp; ./configure --prefix=/usr --disable-install-rdoc \\ &amp;&amp; make \\ &amp;&amp; make install \\# Bundler &amp;&amp; gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/ \\ &amp;&amp; gem install bundler \\ &amp;&amp; bundle config mirror.https://rubygems.org https://ruby.taobao.org \\# Redis config &amp; start &amp;&amp; echo &apos;unixsocket /var/run/redis/redis.sock&apos; &gt;&gt; /etc/redis.conf \\ &amp;&amp; echo &apos;unixsocketperm 770&apos; &gt;&gt; /etc/redis.conf \\ &amp;&amp; chown redis:redis /var/run/redis \\ &amp;&amp; chmod 755 /var/run/redis \\ &amp;&amp; usermod -aG redis git \\ &amp;&amp; (redis-server /etc/redis.conf &amp;)# GitLabWORKDIR /home/git/gitlab/RUN cp config/gitlab.yml.example config/gitlab.yml \\ &amp;&amp; cp config/secrets.yml.example config/secrets.yml \\ &amp;&amp; chmod 0600 config/secrets.yml \\ &amp;&amp; chown -R git log/ \\ &amp;&amp; chown -R git tmp/ \\ &amp;&amp; chmod -R u+rwX,go-w log/ \\ &amp;&amp; chmod -R u+rwX tmp/ \\ &amp;&amp; chmod -R u+rwX tmp/pids/ \\ &amp;&amp; chmod -R u+rwX tmp/sockets/ \\ &amp;&amp; mkdir public/uploads/ \\ &amp;&amp; chmod 0700 public/uploads \\ &amp;&amp; chmod -R u+rwX builds/ \\ &amp;&amp; chmod -R u+rwX shared/artifacts/ \\ &amp;&amp; cp config/unicorn.rb.example config/unicorn.rb \\ &amp;&amp; cp config/initializers/rack_attack.rb.example config/initializers/rack_attack.rb \\ &amp;&amp; git config --global core.autocrlf input \\ &amp;&amp; git config --global gc.auto 0 \\ &amp;&amp; cp config/resque.yml.example config/resque.yml \\ &amp;&amp; cp config/database.yml.mysql config/database.yml \\ &amp;&amp; sed -i &apos;s/&quot;secure password&quot;/git/&apos; config/database.yml \\ &amp;&amp; sed -i &apos;s/# host: localhost/host: mysql/&apos; config/database.yml \\ &amp;&amp; sed -i &apos;s/rubygems.org/ruby.taobao.org/&apos; Gemfile \\ &amp;&amp; bundle install --deployment --without development test postgres aws \\ &amp;&amp; bundle exec rake gitlab:shell:install REDIS_URL=unix:/var/run/redis/redis.sock RAILS_ENV=production \\ &amp;&amp; chown -R git:git /home/git/repositories/ \\ &amp;&amp; chmod -R ug+rwX,o-rwx /home/git/repositories/ \\ &amp;&amp; chmod -R ug-s /home/git/repositories/ \\ &amp;&amp; find /home/git/repositories/ -type d -print0 | xargs -0 chmod g+s \\ &amp;&amp; chmod 700 /home/git/gitlab/public/uploads \\ &amp;&amp; chown -R git:git config/ log/ \\# GitLab rc.file &amp;&amp; cp lib/support/init.d/gitlab /etc/init.d/gitlab# Nginx configWORKDIR /home/git/gitlab/RUN mkdir /etc/nginx/sites-available \\ &amp;&amp; mkdir /etc/nginx/sites-enabled \\ &amp;&amp; cp lib/support/nginx/gitlab /etc/nginx/sites-available/gitlab \\ &amp;&amp; ln -s /etc/nginx/sites-available/gitlab /etc/nginx/sites-enabled/gitlab \\ &amp;&amp; sed -i &apos;20a\\ server 127.0.0.1:8080;&apos; /etc/nginx/sites-available/gitlab \\ &amp;&amp; sed -i &apos;35,54d&apos; /etc/nginx/nginx.conf \\ &amp;&amp; sed -i &apos;33a\\ include /etc/nginx/sites-enabled/*;&apos; /etc/nginx/nginx.confWORKDIR /home/git# Gitlab-WorkhorseRUN git clone https://gitlab.com/gitlab-org/gitlab-workhorse.git \\ &amp;&amp; cd gitlab-workhorse/ \\ &amp;&amp; git checkout v0.7.2 \\ &amp;&amp; make \\ &amp;&amp; sshd-keygenEXPOSE 80 22VOLUME [&quot;/tmp/gitlab-cn&quot;]ADD ./gitlab-init.sh /home/git/gitlab-init.shADD ./gitlab-run.sh /home/git/gitlab-run.shRUN chmod +x /home/git/gitlab-init.shRUN chmod +x /home/git/gitlab-run.shENTRYPOINT [&quot;/home/git/gitlab-run.sh&quot;] 其中，gitlab-init.sh脚本内容如下：1234567#!/bin/bashcd /home/git/gitlabbundle exec rake gitlab:setup RAILS_ENV=production force=yesbundle exec rake assets:precompile RAILS_ENV=productionchown -R git:git /home/git/sudo -u git -H &quot;/usr/bin/git&quot; config --global core.autocrlf &quot;input&quot; gitlab-run.sh脚本内容如下：12345678910111213#!/bin/bash#gitlab start/etc/init.d/gitlab start &amp;#nginx startnginx &amp;#sshd start/usr/sbin/sshd#redis startsudo -u redis -H redis-server /etc/redis.conf 3. Image Build本Image已上传https://hub.docker.com/r/fanzi/gitlab-cn/1docker build --rm=true -t fanzi/gitlab-cn . 4. Image USE docker -v 权限 1chcon -Rt svirt_sandbox_file_t /root/docker-gitlab-bak/backups 创建容器 1docker run -it --detach --restart always -v /root/docker-gitlab-bak/backups:/home/git/gitlab/tmp/backups --link mysql:mysql -p 80:80 -p 22:22 --name gitlab fanzi/gitlab-cn 初始化数据库 确保mysql容器运行，只在创建容器后运行一次 1docker exec -it gitlab /bin/bash -c /home/git/gitlab-init.sh 修改域名 /home/git/gitlab/config/gitlab.yml 1url: 192.168.1.*","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://my.fanzicai.com/tags/MySQL/"},{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"CentOS","slug":"CentOS","permalink":"http://my.fanzicai.com/tags/CentOS/"},{"name":"GitLab","slug":"GitLab","permalink":"http://my.fanzicai.com/tags/GitLab/"},{"name":"Docker","slug":"Docker","permalink":"http://my.fanzicai.com/tags/Docker/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"Docker GitLab中文版安装","slug":"Docker-GitLab中文版安装","date":"2016-05-30T07:11:22.000Z","updated":"2023-02-23T09:21:06.743Z","comments":false,"path":"Program/20160530-Docker-GitLab中文版安装.html","link":"","permalink":"http://my.fanzicai.com/Program/20160530-Docker-GitLab中文版安装.html","excerpt":"GitLab是基于Ruby on Rails的一个开源的版本管理系统，其内嵌了Redis。本文在CentOS7上采用Docker安装GitLab汉化版.","text":"GitLab是基于Ruby on Rails的一个开源的版本管理系统，其内嵌了Redis。本文在CentOS7上采用Docker安装GitLab汉化版. 1. 准备工作可参考CentOS7上安装Docker及GitLab一文，先行安装CentOS、Docker。 Docker MySQLOracle官方已提供MySQL的Docker Image。1docker run -it --detach -p 192.168.1.80:3306:3306 -p 192.168.1.80:33060:33060 --restart always -e MYSQL_ROOT_PASSWORD=123 -v /root/mysql:/var/lib/mysql --name mysql mysql/mysql-server --character-set-server=utf8 --collation-server=utf8_general_ci docker -v 权限1chcon -Rt svirt_sandbox_file_t /root/mysql 进入mysql控制台12docker exec -it mysql /bin/bashmysql -uroot -p123 创建git用户及database12345CREATE USER &apos;git&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;$password&apos;;CREATE DATABASE IF NOT EXISTS `gitlabhq_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, CREATE TEMPORARY TABLES, DROP, INDEX, ALTER, LOCK TABLES ON `gitlabhq_production`.* TO &apos;git&apos;@&apos;%&apos;;flush privileges;\\q Docker CentOS123456docker run --detach -ti \\ --publish 80:80 --publish 8080:8080 \\ --name gitlab \\ --restart always \\ --link mysql:mysql \\ centos:latest 其中–link参数用于表明连接之前mysql容器 进入gitlab-cn shell1docker exec -it gitlab /bin/bash 2. 基本工具正式安GitLab及其依赖库之前，系统必须具备一些条件，需执行以下命令安装一些必要的基本工具 12345yum -y updateyum -y group install &quot;development tools&quot;yum -y install vim cmake wgetyum -y install readline-devel gdbm-devel openssl-devel expat-devel sqlite-devel libyaml-devel libffi-devel libxml2-devel libxslt-devel libicu-devel system-config-firewall-tui python-devel xmlto logwatch perl-ExtUtils-CBuilderyum -y install sudo 以下如非特殊说明，均采用root登录安装 3. Git用户12adduser --system --shell /bin/bash --comment &apos;GitLab&apos; --create-home --home-dir /home/git/ gitchmod -R go+rx /home/git 4. Git因CentOS仓库的Git版本较低，本文采用源码安装的方式。1234567cd /rootwget https://www.kernel.org/pub/software/scm/git/git-2.8.3.tar.gztar xvf git-2.8.3.tar.gzcd git-2.8.3./configure --prefix=/usrmakemake install 5. Ruby Ruby 12345678cd /home/gityum -y install rubywget https://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.1.tar.gztar xvf ruby-2.3.1.tar.gzcd ruby-2.3.1./configure --prefix=/usr --disable-install-rdocmakemake install Bundler 123gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/gem install bundlerbundle config mirror.https://rubygems.org https://ruby.taobao.org https://ruby.taobao.org是个完整的镜像。 6. GoGo源码安装，但需要系统本身已有旧版本。12345yum -y install gocd /rootwget https://storage.googleapis.com/golang/go1.5.3.linux-amd64.tar.gztar xvf go1.5.3.linux-amd64.tar.gz -C /usr/local/ ln -sf /usr/local/go/bin/&#123;go,godoc,gofmt&#125; /usr/bin/ 7. MySQL MySQL安装 1234wget http://repo.mysql.com//mysql57-community-release-el7-8.noarch.rpmrpm -Uvh mysql57-community-release-el7-8.noarch.rpmyum -y updateyum -y install mysql mysql-devel MySQL连接 1mysql -h mysql -ugit -p$password -D gitlabhq_production 其中$password为之前创建git用户时的密码 8. RedisCentOS仓库默认没有Redis，先安装EPEL源。 Redis安装 12yum -y install epel-releaseyum -y install redis 编辑/etc/redis.conf unixsocket设置为 /var/run/redis/redis.sockunixsocketperm 设置为 770 设置及启动 12345chown redis:redis /var/run/redischmod 755 /var/run/redisusermod -aG redis gitsystemctl enable redisredis-server /etc/redis.conf &amp; 9. Node.jsNode.js也需要EPEL源。1yum -y install nodejs 10. GitLab本文是为了安装汉化版的GitLab才采用的源码安装方式。如若英文版，建议采用RPM方式安装，可参见另文或官网。 GitLab下载 1234cd /home/gitsudo -u git -H wget https://gitlab.com/larryli/gitlab/repository/archive.tar.gz?ref=v8.8.0.zh1sudo -u git -H tar xvf archive.tar.gz?ref=v8.8.0.zh1sudo -u git -H ln -s gitlab* gitlab gitlab.yml文件 12cd /home/git/gitlabsudo -u git -H cp config/gitlab.yml.example config/gitlab.yml 编辑gitlab.yml文件1sudo -u git -H vim config/gitlab.yml 修改host，本文修改为本机IP 配置及权限 123456789101112sudo -u git -H cp config/secrets.yml.example config/secrets.ymlsudo -u git -H chmod 0600 config/secrets.ymlsudo chown -R git log/sudo chown -R git tmp/sudo chmod -R u+rwX,go-w log/sudo chmod -R u+rwX tmp/sudo chmod -R u+rwX tmp/pids/sudo chmod -R u+rwX tmp/sockets/sudo -u git -H mkdir public/uploads/sudo chmod 0700 public/uploadssudo chmod -R u+rwX builds/sudo chmod -R u+rwX shared/artifacts/ unicorn.rb文件 1sudo -u git -H cp config/unicorn.rb.example config/unicorn.rb 必要时编辑unicorn.rb文件1sudo -u git -H vim config/unicorn.rb 其他配置 123sudo -u git -H cp config/initializers/rack_attack.rb.example config/initializers/rack_attack.rbsudo -u git -H git config --global core.autocrlf inputsudo -u git -H git config --global gc.auto 0 resque.yml文件 1sudo -u git -H cp config/resque.yml.example config/resque.yml 编辑resque.yml文件1sudo -u git -H vim config/resque.yml 本文无修改 database.yml文件12sudo -u git -H cp config/database.yml.mysql config/database.ymlsudo -u git -H chmod o-rwx config/database.yml 编辑database.yml文件修改用户为git，host为mysql gitlab-shell 编辑Gemfile改为ruby.taobao.org 12sudo -u git -H bundle install --deployment --without development test postgres awssudo -u git -H bundle exec rake gitlab:shell:install REDIS_URL=unix:/var/run/redis/redis.sock RAILS_ENV=production 11. gitlab-workhorse12345cd /home/gitsudo -u git -H git clone https://gitlab.com/gitlab-org/gitlab-workhorse.gitcd gitlab-workhorsesudo -u git -H git checkout v0.7.2sudo -u git -H make 12. DB Init12cd /home/git/gitlabsudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production force=yes 13. gitlab root更改gitlab root密码，默认无密码，也可初次访问时修改。1sudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production GITLAB_ROOT_PASSWORD=yourpassword GITLAB_ROOT_EMAIL=youremail 14. gitlab服务 一些配置 12345sudo chown -R git:git /home/git/repositories/sudo chmod -R ug+rwX,o-rwx /home/git/repositories/sudo chmod -R ug-s /home/git/repositories/sudo find /home/git/repositories/ -type d -print0 | sudo xargs -0 chmod g+ssudo chmod 700 /home/git/gitlab-v8.8.0.zh1-5c495e42d863613b5288d332c2c6f4189a684735/public/uploads 自启动 123sudo cp lib/support/init.d/gitlab /etc/init.d/gitlabchkconfig gitlab on/etc/init.d/gitlab start 15. 常用查询 确认应用状态 1sudo -u git -H bundle exec rake gitlab:env:info RAILS_ENV=production 编译assets 1sudo -u git -H bundle exec rake assets:precompile RAILS_ENV=production 16. Nginx Nginx安装 123456cd /home/git/gitlab/yum -y install nginxmkdir /etc/nginx/sites-availablemkdir /etc/nginx/sites-enabledsudo cp lib/support/nginx/gitlab /etc/nginx/sites-available/gitlabsudo ln -s /etc/nginx/sites-available/gitlab /etc/nginx/sites-enabled/gitlab 修改gitlab配置 增加server 127.0.0.1:8080 修改nginx.conf 增加include /etc/nginx/sites-enabled/*去掉默认的80 server 自启动 12systemctl enable nginxnginx 17. 确认安装情况 编辑/home/git/gitlab-shell/config.yml将url改为http://127.0.0.1:808012cd /home/git/gitlab/sudo -u git -H bundle exec rake gitlab:check RAILS_ENV=production","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://my.fanzicai.com/tags/MySQL/"},{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"CentOS","slug":"CentOS","permalink":"http://my.fanzicai.com/tags/CentOS/"},{"name":"GitLab","slug":"GitLab","permalink":"http://my.fanzicai.com/tags/GitLab/"},{"name":"Docker","slug":"Docker","permalink":"http://my.fanzicai.com/tags/Docker/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"CentOS7上搭建Docker私有仓库","slug":"CentOS7上搭建Docker私有仓库","date":"2016-05-25T08:19:37.000Z","updated":"2023-02-23T09:21:06.743Z","comments":false,"path":"Program/20160525-CentOS7上搭建Docker私有仓库.html","link":"","permalink":"http://my.fanzicai.com/Program/20160525-CentOS7上搭建Docker私有仓库.html","excerpt":"Docker是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。","text":"Docker是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。 1. CentOSCentOS7（Community Enterprise Operation System, 社区企业操作系统）,截至发文时，最新版为CentOS7，本文安装的是64位。 安装环境： VMware® Workstation 12 Pro 安装版本 CentOS-7-x86_64-Everything-1511 安装方式 Minimal Install 2. Docker参考官网安装流程和CentOS Wiki。 准备工作 1sudo yum -y update CentOS Wiki推荐方式 1yum -y install docker 自启动 12systemctl enable dockersystemctl start docker 本地仓库 12docker pull registrydocker run -d -p 5000:5000 --restart=always -v /opt/data/registry:/tmp/registry --name registry docker.io/registry 访问仓库 1curl *.*.*.*:5000/v1/search 3. 上传镜像在已安装docker gitlab的虚拟机上，向上文仓库提交镜像，采用gitlab image。 列出镜像 1docker images 创建镜像链接 1docker tag docker.io/gitlab/gitlab-ce *.*.*.*:5000/gitlab-ce 修改客户端配置文件 1vim /etc/sysconfig/docker 增加”–insecure-registry *.*.*.*:5000” 提交镜像1docker push *.*.*.*:5000/gitlab-ce","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"CentOS","slug":"CentOS","permalink":"http://my.fanzicai.com/tags/CentOS/"},{"name":"Docker","slug":"Docker","permalink":"http://my.fanzicai.com/tags/Docker/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"CentOS7上安装Docker及Jenkins","slug":"CentOS7上安装Docker及Jenkins","date":"2016-05-25T07:50:55.000Z","updated":"2023-02-23T09:21:06.743Z","comments":false,"path":"Program/20160525-CentOS7上安装Docker及Jenkins.html","link":"","permalink":"http://my.fanzicai.com/Program/20160525-CentOS7上安装Docker及Jenkins.html","excerpt":"Jenkins是基于Java开发的一种持续集成工具，用于监控持续重复的工作，功能包括： 持续的软件版本发布/测试项目。 监控外部调用执行的工作。","text":"Jenkins是基于Java开发的一种持续集成工具，用于监控持续重复的工作，功能包括： 持续的软件版本发布/测试项目。 监控外部调用执行的工作。 1. CentOSCentOS7（Community Enterprise Operation System, 社区企业操作系统）,截至发文时，最新版为CentOS7，本文安装的是64位。 安装环境： VMware® Workstation 12 Pro 安装版本 CentOS-7-x86_64-Everything-1511 安装方式 Minimal Install 2. Docker参考CentOS Wiki。 准备工作 1sudo yum -y update CentOS Wiki推荐方式 1yum -y install docker 自启动 12systemctl enable dockersystemctl start docker 3. Jenkins采用docker jenkins 安装1docker run --detach --name jenkins --restart always -v /root/docker-jenkins-data:/var/jenkins_home -p 8080:8080 -p 50000:50000 jenkins 下载image及创建名为jenkis的容器并运行启动、停止容器12docker start jenkinsdocker stop jenkins 访问 建议采用IE内核的浏览器在chrome浏览器下，配置任务时容易出错 1http://*.*.*.*:8080 3. Git插件 管理插件因为采用gitlab管理源码，需要添加 git plugin git client plugin gitlab hook plugin gitlab plugin gitlab merge request builder gitlab logo plugin Gitlab Authentication plugin 4. 访问Gitlab 采用git clone git@host_gitlab:usr_name/repo_name.git需先在jenkins容器中生成私钥12cd /var/jenkins_homessh-keygen -t rsa -C &quot;fanzicai@yahoo.com&quot; -f /var/jenkins_home/.ssh/id_rsa 把id_rsa.pub的公钥内容，配置到gitlab服务器上同时，在jenkins构建工程设置中私钥采用From the Jenkins master ~/.ssh","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"CentOS","slug":"CentOS","permalink":"http://my.fanzicai.com/tags/CentOS/"},{"name":"Docker","slug":"Docker","permalink":"http://my.fanzicai.com/tags/Docker/"},{"name":"Jenkins","slug":"Jenkins","permalink":"http://my.fanzicai.com/tags/Jenkins/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"CentOS7上安装Docker及GitLab","slug":"CentOS7上安装Docker及GitLab","date":"2016-05-25T07:04:14.000Z","updated":"2023-02-23T09:21:06.743Z","comments":false,"path":"Program/20160525-CentOS7上安装Docker及GitLab.html","link":"","permalink":"http://my.fanzicai.com/Program/20160525-CentOS7上安装Docker及GitLab.html","excerpt":"Docker是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。","text":"Docker是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。 1. CentOSCentOS7（Community Enterprise Operation System, 社区企业操作系统）,截至发文时，最新版为CentOS7，本文安装的是64位。 安装环境： VMware® Workstation 12 Pro 安装版本 CentOS-7-x86_64-Everything-1511 安装方式 Minimal Install 2. Docker参考官网安装流程和CentOS Wiki。 准备工作 1sudo yum -y update 官网方式 添加repo 12345678sudo tee /etc/yum.repos.d/docker.repo &lt;&lt;-&apos;EOF&apos;[dockerrepo]name=Docker Repositorybaseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/enabled=1gpgcheck=1gpgkey=https://yum.dockerproject.org/gpgEOF 正式安装1sudo yum -y install docker-engine CentOS Wiki推荐方式 1yum -y install docker 自启动 12systemctl enable dockersystemctl start docker 3. GitLab安装教程详见http://docs.gitlab.com/omnibus/docker/。 安装 1234567sudo docker run --detach \\ --hostname gitlab.example.com \\ --env GITLAB_OMNIBUS_CONFIG=&quot;external_url &apos;http://my.domain.com/&apos;; gitlab_rails[&apos;lfs_enabled&apos;] = true;&quot;\\ --publish 443:443 --publish 80:80 --publish 22:22\\ --name gitlab \\ --restart always \\ gitlab/gitlab-ce:latest 进入gitlab控制台 1sudo docker exec -it gitlab /bin/bash 配置 1sudo docker exec -it gitlab vi /etc/gitlab/gitlab.rb 运行 1sudo docker start gitlab 其他命令 停止 1sudo docker stop gitlab 删除1sudo docker rm gitlab 更新1sudo docker pull gitlab/gitlab-ce:latest 查看日志1sudo docker logs gitlab 查看Container1docker ps -a 查看Image1docker images","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"CentOS","slug":"CentOS","permalink":"http://my.fanzicai.com/tags/CentOS/"},{"name":"GitLab","slug":"GitLab","permalink":"http://my.fanzicai.com/tags/GitLab/"},{"name":"Docker","slug":"Docker","permalink":"http://my.fanzicai.com/tags/Docker/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"CentOS7上安装GitLab（SRC）","slug":"CentOS7上安装GitLab（SRC）","date":"2016-05-20T05:31:11.000Z","updated":"2023-02-23T09:21:06.743Z","comments":false,"path":"Program/20160520-CentOS7上安装GitLab（SRC）.html","link":"","permalink":"http://my.fanzicai.com/Program/20160520-CentOS7上安装GitLab（SRC）.html","excerpt":"GitLab是基于Ruby on Rails的一个开源的版本管理系统，其内嵌了Redis。本文在CentOS7上采用源码方式安装GitLab汉化版.","text":"GitLab是基于Ruby on Rails的一个开源的版本管理系统，其内嵌了Redis。本文在CentOS7上采用源码方式安装GitLab汉化版. 1. CentOSCentOS7（Community Enterprise Operation System, 社区企业操作系统）,截至发文时，最新版为CentOS7，本文安装的是64位。 安装环境： VMware® Workstation 12 Pro 安装版本 CentOS-7-x86_64-Everything-1511 安装方式 Minimal Install 2. 基本工具正式安GitLab及其依赖库之前，系统必须具备一些条件，需执行以下命令安装一些必要的基本工具 1234yum -y updateyum -y group install &quot;development tools&quot;yum -y install vim cmake wgetyum -y install readline-devel gdbm-devel openssl-devel expat-devel sqlite-devel libyaml-devel libffi-devel libxml2-devel libxslt-devel libicu-devel system-config-firewall-tui python-devel xmlto logwatch perl-ExtUtils-CBuilder 以下如非特殊说明，均采用root登录安装 3. Git因CentOS仓库的Git版本较低，本文采用源码安装的方式。1234567cd /rootwget https://www.kernel.org/pub/software/scm/git/git-2.8.3.tar.gztar xvf git-2.8.3.tar.gzcd git-2.8.3./configure --prefix=/usrmakemake install 4. Ruby Ruby 12345678cd /rootyum -y install rubywget https://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.1.tar.gztar xvf ruby-2.3.1.tar.gzcd ruby-2.3.1./configure --prefix=/usr --disable-install-rdocmakemake install Bundler 123gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/gem install bundlerbundle config mirror.https://rubygems.org https://ruby.taobao.org https://ruby.taobao.org是个完整的镜像。 5. GoGo源码安装，需要系统本身已有旧版本。12345yum -y install gocd /rootwget https://storage.googleapis.com/golang/go1.5.3.linux-amd64.tar.gztar xvf go1.5.3.linux-amd64.tar.gz -C /usr/local/ln -sf /usr/local/go/bin/&#123;go,godoc,gofmt&#125; /usr/bin/ 6. Git用户1adduser --system --shell /bin/bash --comment &apos;GitLab&apos; --create-home --home-dir /home/git/ git 7. PostgreSQL PostgreSQL安装 1234yum -y install postgresql-server postgresql-contrib postgresql-develpostgresql-setup initdbsystemctl enable postgresqlsystemctl start postgresql 默认用户postgres的密码修改 12su postgrespsql -U postgres 执行SQL语句1ALTER USER postgres WITH PASSWORD &apos;postgres&apos; 退出命令1\\q GitLab库 123sudo -u postgres psql -d template1 -c &quot;CREATE USER git CREATEDB;&quot;sudo -u postgres psql -d template1 -c &quot;CREATE DATABASE gitlabhq_production OWNER git;&quot;sudo -u postgres psql -d template1 -c &quot;CREATE EXTENSION IF NOT EXISTS pg_trgm;&quot; 查看创建情况 1sudo -u git -H psql -d gitlabhq_production 执行SQL语句1SELECT true AS enabled FROM pg_available_extensions WHERE name = &apos;pg_trgm&apos;; 结果1234enabled-------t(1 row) 8. RedisCentOS仓库默认没有Redis，先安装EPEL源。 Redis安装 12yum -y install epel-releaseyum -y install redis 编辑/etc/redis.conf unixsocket设置为 /var/run/redis/redis.sockunixsocketperm 设置为 770 设置及启动 12345chown redis:redis /var/run/redischmod 755 /var/run/redisusermod -aG redis gitsystemctl enable redissystemctl start redis 9. Node.jsNode.js也需要EPEL源。1yum -y install nodejs 10. GitLab本文是为了安装汉化版的GitLab才采用的源码安装方式。如若英文版，建议采用RPM方式安装，可参见另文或官网。 GitLab下载 1234cd /home/gitsudo -u git -H wget https://gitlab.com/larryli/gitlab/repository/archive.tar.gz?ref=v8.8.0.zh1sudo -u git -H tar xvf archive.tar.gz?ref=v8.8.0.zh1sudo -u git -H ln -s gitlab* gitlab gitlab.yml文件 12cd /home/git/gitlabsudo -u git -H cp config/gitlab.yml.example config/gitlab.yml 编辑gitlab.yml文件1sudo -u git -H vim config/gitlab.yml 修改host，本文修改为本机IP 配置及权限 123456789101112sudo -u git -H cp config/secrets.yml.example config/secrets.ymlsudo -u git -H chmod 0600 config/secrets.ymlsudo chown -R git log/sudo chown -R git tmp/sudo chmod -R u+rwX,go-w log/sudo chmod -R u+rwX tmp/sudo chmod -R u+rwX tmp/pids/sudo chmod -R u+rwX tmp/sockets/sudo -u git -H mkdir public/uploads/sudo chmod 0700 public/uploadssudo chmod -R u+rwX builds/sudo chmod -R u+rwX shared/artifacts/ unicorn.rb文件 1sudo -u git -H cp config/unicorn.rb.example config/unicorn.rb 必要时编辑unicorn.rb文件1sudo -u git -H vim config/unicorn.rb 本文将8080改为9000 其他配置 123sudo -u git -H cp config/initializers/rack_attack.rb.example config/initializers/rack_attack.rbsudo -u git -H git config --global core.autocrlf inputsudo -u git -H git config --global gc.auto 0 resque.yml文件 1sudo -u git -H cp config/resque.yml.example config/resque.yml 编辑resque.yml文件1sudo -u git -H vim config/resque.yml 本文无修改 database.yml文件 12sudo -u git cp config/database.yml.postgresql config/database.ymlsudo -u git -H chmod o-rwx config/database.yml gitlab-shell 编辑Gemfile改为ruby.taobao.org 12sudo -u git -H bundle install --deployment --without development test mysql awssudo -u git -H bundle exec rake gitlab:shell:install REDIS_URL=unix:/var/run/redis/redis.sock RAILS_ENV=production 11. gitlab-workhorse12345cd /home/gitsudo -u git -H git clone https://gitlab.com/gitlab-org/gitlab-workhorse.gitcd gitlab-workhorsesudo -u git -H git checkout v0.7.2sudo -u git -H make 12. DB Init12cd /home/git/gitlabsudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production 选 yes 13. gitlab root更改gitlab root密码，默认无密码，也可初次访问时修改。1sudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production GITLAB_ROOT_PASSWORD=yourpassword GITLAB_ROOT_EMAIL=youremail 14. gitlab服务 一些配置 123sudo chmod -R ug+rwX,o-rwx /home/git/repositories/sudo chmod -R ug-s /home/git/repositories/sudo find /home/git/repositories/ -type d -print0 | sudo xargs -0 chmod g+s 自启动 123sudo cp lib/support/init.d/gitlab /etc/init.d/gitlabchkconfig gitlab onsystemctl start gitlab 15. 常用查询 确认应用状态 1sudo -u git -H bundle exec rake gitlab:env:info RAILS_ENV=production 编译assets 1sudo -u git -H bundle exec rake assets:precompile RAILS_ENV=production 16. Nginx Nginx安装 123456cd /home/git/gitlab/yum -y install nginxmkdir /etc/nginx/sites-availablemkdir /etc/nginx/sites-enabledsudo cp lib/support/nginx/gitlab /etc/nginx/sites-available/gitlabsudo ln -s /etc/nginx/sites-available/gitlab /etc/nginx/sites-enabled/gitlab 修改gitlab配置 增加server 127.0.0.1:9000 修改nginx.conf 增加include /etc/nginx/sites-enabled/*去掉默认的80 server 自启动 1234systemctl enable nginxsystemctl start nginxfirewall-cmd --permanent --add-service=httpsystemctl reload firewalld 17. SELinux设置此时nginx还无法访问gitlab等资源，根据SELinux规则做些权限修改1setenforce Permissive 运行gitlab一段时间，并访问gitlab1cat /var/log/audit/audit.log 可以查看到一些日志1grep ssh-keygen /var/log/audit/audit.log | audit2allow -M postgreylocal 可以制定关于ssh-keygen的一些允许规则，其他“comm”同理1semodule -i postgreylocal.pp 可以添加自定义的SELinux策略 18. 确认安装情况12cd /home/git/gitlab/sudo -u git -H bundle exec rake gitlab:check RAILS_ENV=production 19. 注意事项 整个安装过程，在最后配置nginx代理时碰到很多权限问题，这和SELinux有关，还需要研究，细化权限配置。前文中，端口9000默认在SELinux里开放，故直接使用，后续还应保持8080端口并添加相应权限，避免与其他应用的9000端口冲突。查看端口开放情况1semanage port -l | grep http 安装semanage1yum -y install policycoreutils-python CentOS SELinux SELinux Booleans EPEL information","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://my.fanzicai.com/tags/Nginx/"},{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"CentOS","slug":"CentOS","permalink":"http://my.fanzicai.com/tags/CentOS/"},{"name":"GitLab","slug":"GitLab","permalink":"http://my.fanzicai.com/tags/GitLab/"},{"name":"Git","slug":"Git","permalink":"http://my.fanzicai.com/tags/Git/"},{"name":"Redis","slug":"Redis","permalink":"http://my.fanzicai.com/tags/Redis/"},{"name":"Ruby on Rails","slug":"Ruby-on-Rails","permalink":"http://my.fanzicai.com/tags/Ruby-on-Rails/"},{"name":"Gem","slug":"Gem","permalink":"http://my.fanzicai.com/tags/Gem/"},{"name":"Go","slug":"Go","permalink":"http://my.fanzicai.com/tags/Go/"},{"name":"PostgreSQL","slug":"PostgreSQL","permalink":"http://my.fanzicai.com/tags/PostgreSQL/"},{"name":"SELinux","slug":"SELinux","permalink":"http://my.fanzicai.com/tags/SELinux/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"CentOS7上安装GitLab（RPM）","slug":"CentOS7上安装GitLab（RPM）","date":"2016-05-19T06:18:11.000Z","updated":"2023-02-23T09:21:06.743Z","comments":false,"path":"Program/20160519-CentOS7上安装GitLab（RPM）.html","link":"","permalink":"http://my.fanzicai.com/Program/20160519-CentOS7上安装GitLab（RPM）.html","excerpt":"GitLab是基于Ruby on Rails的一个开源的版本管理系统，其内嵌了Redis。本文在CentOS7上安装GitLab.","text":"GitLab是基于Ruby on Rails的一个开源的版本管理系统，其内嵌了Redis。本文在CentOS7上安装GitLab. 1. CentOS安装CentOS7（Community Enterprise Operation System, 社区企业操作系统）,截至发文时，最新版为CentOS7，本文安装的是64位。 安装环境： VMware® Workstation 12 Pro 安装版本 CentOS-7-x86_64-Everything-1511 安装方式 Minimal Install 2. GitLab安装 准备工作 12345678yum -y install curl openssh-serversystemctl enable sshdsystemctl start sshdyum -y install postfixsystemctl enable postfixsystemctl start postfixfirewall-cmd --permanent --add-service=httpsystemctl reload firewalld 安装GitLab无法按照官网的说明进行安装，原因你懂的！不过，官网提供的镜像安装方式https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/。 创建文件/etc/yum.repos.d/gitlab-ce.repo 1234567[gitlab-ce]name=gitlab-cebaseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7repo_gpgcheck=0gpgcheck=0enabled=1gpgkey=https://packages.gitlab.com/gpg.key 执行命令 12yum makecacheyum -y install gitlab-ce 初始化 1gitlab-ctl reconfigure 访问GitLab http://...:80默认管理用户为 12rootadmin@example.com 第一次登录需要更改密码 常见问题 建议使用Chrome等浏览器 亲测360等浏览器不好用","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"},{"name":"CentOS","slug":"CentOS","permalink":"http://my.fanzicai.com/tags/CentOS/"},{"name":"GitLab","slug":"GitLab","permalink":"http://my.fanzicai.com/tags/GitLab/"},{"name":"Git","slug":"Git","permalink":"http://my.fanzicai.com/tags/Git/"},{"name":"Redis","slug":"Redis","permalink":"http://my.fanzicai.com/tags/Redis/"},{"name":"Ruby on Rails","slug":"Ruby-on-Rails","permalink":"http://my.fanzicai.com/tags/Ruby-on-Rails/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"Hexo Preliminary Study","slug":"Hexo-Preliminary-Study","date":"2016-05-18T02:51:44.000Z","updated":"2023-02-23T09:21:06.740Z","comments":false,"path":"Program/20160518-Hexo-Preliminary-Study.html","link":"","permalink":"http://my.fanzicai.com/Program/20160518-Hexo-Preliminary-Study.html","excerpt":"Hexo is a fast, simple &amp; powerful blog framework. In hexo, we can write posts in Markdown (including GFM, Github Flavored Markdown).","text":"Hexo is a fast, simple &amp; powerful blog framework. In hexo, we can write posts in Markdown (including GFM, Github Flavored Markdown). 1. Hexo InstallRefered in https://hexo.io/docs/index.html Before Hexo installing, need install: Node.js, recommend the LTS Version Git Install Hexo in git bash:123mkdir %Blog_Root_Dir%cd %Blog_Root_Dir%npm install -g hexo-cli Init Hexo:1hexo init [dir] 2. Hexo and GitHub Pages Create Repo on GitHub the repo name is fanzicai.github.io Edit _config.yml 1234deploy: type: git repo: git@github.com:fanzicai/fanzicai.github.io.git branch: master Install deploy-tools 1npm install hexo-deployer-git --save Deploy 123hexo clean hexo generate ## or &quot;hexo g&quot;hexo deploy ## or &quot;hexo d&quot; 一键发布1hexo deploy g View https://fanzicai.github.io 3. Hexo TestTest on http://127.0.0.1:4000 1hexo server ## or &quot;hexo s&quot; 4. Hexo ThemeFor example, the theme “hexo-theme-athene“ About athene for hexo 3.* and latest refer to hexo-theme-yilia for learning Use athene install 12cd %Blog_Root_Dir%git clone git@github.com:fanzicai/hexo-theme-athene themes/athene configure edit the “_config.yml” 1theme: athene Fork Me on GitHub Edit “themes/athene/layout.ejs”, insert 1&lt;a href=&quot;https://github.com/fanzicai&quot;&gt;&lt;img style=&quot;position: absolute; top: 0; left: 0; border: 0;&quot; src=&quot;https://camo.githubusercontent.com/82b228a3648bf44fc1163ef44c62fcc60081495e/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f7265645f6161303030302e706e67&quot; alt=&quot;Fork me on GitHub&quot; data-canonical-src=&quot;https://s3.amazonaws.com/github/ribbons/forkme_left_red_aa0000.png&quot;&gt;&lt;/a&gt; before &lt; / body &gt;","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"GitHub","slug":"GitHub","permalink":"http://my.fanzicai.com/tags/GitHub/"},{"name":"Hexo","slug":"Hexo","permalink":"http://my.fanzicai.com/tags/Hexo/"},{"name":"Node.js","slug":"Node-js","permalink":"http://my.fanzicai.com/tags/Node-js/"},{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"MarkdownPad 2 Preliminary Study","slug":"MarkdownPad-2-Preliminary-Study","date":"2016-05-17T08:41:23.000Z","updated":"2023-02-23T09:21:06.740Z","comments":false,"path":"Program/20160517-MarkdownPad-2-Preliminary-Study.html","link":"","permalink":"http://my.fanzicai.com/Program/20160517-MarkdownPad-2-Preliminary-Study.html","excerpt":"MarkdownPad is a full-featured Markdown editor for Windows.","text":"MarkdownPad is a full-featured Markdown editor for Windows. 1. Markdown DownloadDownload URL for Windows: http://markdownpad.com/download.html 2. Free Key for LearningCatch from WWW. Email: *Soar360@live.com* Key: 1GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ== Remark: Just for Learning","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"GitHub","slug":"GitHub","permalink":"http://my.fanzicai.com/tags/GitHub/"},{"name":"2016","slug":"2016","permalink":"http://my.fanzicai.com/tags/2016/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"Tomcat PermGen Space Error","slug":"Tomcat-PermGen-Space-Error","date":"2015-06-17T01:12:44.000Z","updated":"2023-02-23T09:21:06.740Z","comments":false,"path":"Program/20150617-Tomcat-PermGen-Space-Error.html","link":"","permalink":"http://my.fanzicai.com/Program/20150617-Tomcat-PermGen-Space-Error.html","excerpt":"PermGen space的全称是Permanent Generation space,是指内存的永久保存区域，这块内存主要是被JVM存放Class和Meta信息的。","text":"PermGen space的全称是Permanent Generation space,是指内存的永久保存区域，这块内存主要是被JVM存放Class和Meta信息的。 1. PermGen SpacePermGen space的全称是Permanent Generation space,是指内存的永久保存区域，这块内存主要是被JVM存放Class和Meta信息的,Class在被Loader时就会被放到PermGen space中，它和存放类实例(Instance)的Heap区域不同,GC(Garbage Collection)不会在主程序运行期对PermGen space进行清理，所以如果你的应用中有很CLASS的话,就很可能出现PermGen space错误，这种错误常见在web服务器对JSP进行pre compile的时候。如果你的WEB APP下都用了大量的第三方jar, 其大小超过了jvm默认的大小(4M)那么就会产生此错误信息了。 2. MaxPermSize解决PermGen Space Error： catalina.sh下为：1JAVA_OPTS=&quot;$JAVA_OPTS -server -XX:PermSize=128M -XX:MaxPermSize=512m&quot; 3. Heap Size解决Heap Size Error： catalina.sh下为：1JAVA_OPTS=&quot;$JAVA_OPTS -server -Xms800m -Xmx800m -XX:MaxNewSize=256m&quot;","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"2015","slug":"2015","permalink":"http://my.fanzicai.com/tags/2015/"},{"name":"Tomcat","slug":"Tomcat","permalink":"http://my.fanzicai.com/tags/Tomcat/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"Pyramid环境自动安装","slug":"Pyramid环境自动安装","date":"2015-06-14T05:58:42.000Z","updated":"2023-02-23T09:21:06.740Z","comments":false,"path":"Program/20150614-Pyramid环境自动安装.html","link":"","permalink":"http://my.fanzicai.com/Program/20150614-Pyramid环境自动安装.html","excerpt":"本文在Windows和Linux下自动安装Pyramid环境。","text":"本文在Windows和Linux下自动安装Pyramid环境。 1. 前置条件 安装python 将python安装目录添加至系统环境变量中 windows下，cmd控制台python命令可正常执行linux下，python命令可正常执行 解压工具 windows下，须安装winrar，根据实际安装路径更改install.py 2. 软件依赖所需软件包，分别放在5个目录下，目录名为0、1、2、3、4，顺序代表依赖关系，如目录1中安装包依赖0，以此类推。 0 1setuptools-15.0.tar.gz 1 123456789101112Chameleon-2.22.tar.gzMarkupSafe-0.23.tar.gzPasteDeploy-1.5.2.tar.gzPygments-2.0.2.tar.gzrepoze.lru-0.6.tar.gzSQLAlchemy-1.0.0b5.tar.gztranslationstring-1.3.tar.gzvenusian-1.0.tar.gzwaitress-0.8.9.tar.gzWebOb-1.4.tar.gzzope.deprecation-4.1.2.tar.gzzope.interface-4.1.2.tar.gz 2 1234Mako-1.0.1.tar.gzpyramid-1.5.4.tar.gztransaction-1.4.3.tar.gzzope.exceptions-4.0.7.tar.gz 3 12345pyramid_chameleon-0.3.tar.gzpyramid_mako-1.0.2.tar.gzpyramid_tm-0.11.tar.gzzope.sqlalchemy-0.7.6.tar.gzzope.testing-4.1.3.tar.gz 4 1pyramid_debugtoolbar-2.3.tar.gz 3. 安装脚本 install.py 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384 ######################################################## This script is used to install pyramid environment.# Author: fanzi#######################################################import osimport sysimport stringwinrar_file = &apos;c:\\\\&quot;Program Files&quot;\\\\WinRAR\\\\winrar.exe&apos;target_path = &apos;build&apos;def get_file_tar(file_path): if not os.path.isdir(file_path): return &#123;&#125; files = os.listdir(file_path) for name in files: if os.path.isdir(name): files.remove(name) elif (-1 == string.find(name, &apos;tar&apos;)) and (-1 == string.find(name, &apos;zip&apos;)): files.remove(name) print files return filesdef file_decompress(path, files): tmp_dir = os.path.join(path, target_path) if not os.path.exists(tmp_dir): os.mkdir(tmp_dir) for name in files: tmp_file = os.path.join(path,name) if not os.path.isfile(tmp_file): continue exe_str = &apos;&apos; if sys.platform.startswith(&apos;linux&apos;): exe_str = &apos;tar xvf &apos; + tmp_file + &apos; -C &apos; + tmp_dir + &apos;/&apos; elif sys.platform.startswith(&apos;win&apos;): exe_str = winrar_file + &apos; x -o- &apos; + tmp_file + &apos; &apos; + tmp_dir +&apos;\\\\&apos; print exe_str os.system(exe_str) def file_install(path): path = os.path.join(path, target_path) if not os.path.isdir(path): return exe_str = &apos;&apos; for dirs in os.listdir(path): tmp_dir = os.path.join(path, dirs) if not os.path.isdir(tmp_dir): continue os.chdir(tmp_dir) #print os.getcwd() exe_str = &apos;python setup.py install&apos; os.system(exe_str)cur_path = os.getcwd()cur_dirs = os.listdir(cur_path)cur_dirs.sort()for paths in cur_dirs: tmp_path = os.path.join(cur_path,paths) if not os.path.isdir(tmp_path): continue #获取tar或zip安装包列表 files = get_file_tar(tmp_path) #解压到build文件夹 file_decompress(tmp_path, files) #从build中安装 file_install(tmp_path)os.chdir(cur_path)print os.getcwd() 4. 验证方法 #windows下，还应把pcreate等所在路径添加系统环境变量中1234567891011121314151617181920212223242526mkdir $yourenv\\webtestcd $yourenv\\webtest#创建测试工程mystarter和myalchemypcreate -t starter mystarterpcreate -t alchemy myalchemycd mystarterpython setup.py developpserve --reload development.ini#浏览器访问http://127.0.0.1:6543cd ..\\myalchemypython setup.py develop#alchemy涉及到数据库的访问#以使用mysql数据库为例#ip: 127.0.0.1:3306, user: root, password: 123#在mysql数据库中添加database: myalchemy#编辑development.ini#注释掉“sqlalchemy.url = sqlite:///%(here)s/MyAlchemy.sqlite”#添加“sqlalchemy.url = mysql://root:123@localhost/myalchemy?charset=utf8”initialize_myalchemy_dbpserve --reload development.ini#浏览器访问http://127.0.0.1:6543","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://my.fanzicai.com/tags/Linux/"},{"name":"Windows","slug":"Windows","permalink":"http://my.fanzicai.com/tags/Windows/"},{"name":"Pyramid","slug":"Pyramid","permalink":"http://my.fanzicai.com/tags/Pyramid/"},{"name":"2015","slug":"2015","permalink":"http://my.fanzicai.com/tags/2015/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"Linux Kill命令","slug":"Linux-Kill命令","date":"2014-06-17T01:18:08.000Z","updated":"2023-02-23T09:21:06.740Z","comments":false,"path":"Program/20140617-Linux-Kill命令.html","link":"","permalink":"http://my.fanzicai.com/Program/20140617-Linux-Kill命令.html","excerpt":"使用Linux kill最安全的方法是不加修饰符，不带标志。","text":"使用Linux kill最安全的方法是不加修饰符，不带标志。 1. 绝杀1kill -9 PID 2. 优雅1kill -l PID 3. 其他12ps -ef | grep httpdps -ef PID","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://my.fanzicai.com/tags/Linux/"},{"name":"2014","slug":"2014","permalink":"http://my.fanzicai.com/tags/2014/"},{"name":"Shell","slug":"Shell","permalink":"http://my.fanzicai.com/tags/Shell/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"Linux-Nginx-Mysql-Python环境搭建","slug":"Linux-Nginx-Mysql-Python环境搭建","date":"2014-06-14T05:35:53.000Z","updated":"2023-02-23T09:21:06.740Z","comments":false,"path":"Program/20140614-Linux-Nginx-Mysql-Python环境搭建.html","link":"","permalink":"http://my.fanzicai.com/Program/20140614-Linux-Nginx-Mysql-Python环境搭建.html","excerpt":"本文在Linux环境下自动部署Nginx、MySQL、Pylons，并自动创建myweb测试用工程，可直接对外提供Web服务。","text":"本文在Linux环境下自动部署Nginx、MySQL、Pylons，并自动创建myweb测试用工程，可直接对外提供Web服务。 1. 软件包 核心包 1234nginx-1.4.6.tar.gzmysql-5.1.53-linux-i686-glibc23.tar.gzPython-2.7.5.tar.bz2MySQL-python-1.2.5.tar 辅助包 123456openssl-1.0.1f.tar.gzpcre-8.34.tar.bz2PyXML-0.8.4.tar.gzreadline-6.2.4.1.tar.gzsetuptools-3.3.tar.gzsqlite-autoconf-3080002.tar.gz 其他包 1python2.tar 该包为提前在某台Linux机器上安装好的Python目录的压缩包，安装路径为1/usr/local/python2 制作过程：1、源码安装Python2.7.52、在该python环境下，easy_install安装pylons 2. 辅助文件 mysql.cfg 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151# Example MySQL config file for very large systems.## This is for a large system with memory of 1G-2G where the system runs mainly# MySQL.## You can copy this file to# /etc/my.cnf to set global options,# mysql-data-dir/my.cnf to set server-specific options (in this# installation this directory is /usr/local/mysql/data) or# ~/.my.cnf to set user-specific options.## In this file, you can use all long options that a program supports.# If you want to know which options a program supports, run the program# with the &quot;--help&quot; option.# The following options will be passed to all MySQL clients[client]#password = your_passwordport = 3306socket = /tmp/mysql.sock# Here follows entries for some specific programs# The MySQL server[mysqld]port = 3306socket = /tmp/mysql.sockskip-lockingkey_buffer_size = 384Mmax_allowed_packet = 1Mtable_open_cache = 512sort_buffer_size = 2Mread_buffer_size = 2Mread_rnd_buffer_size = 8Mmyisam_sort_buffer_size = 64Mthread_cache_size = 8query_cache_size = 32M# Try number of CPU&apos;s*2 for thread_concurrencythread_concurrency = 8default-character-set=utf8# Don&apos;t listen on a TCP/IP port at all. This can be a security enhancement,# if all processes that need to connect to mysqld run on the same host.# All interaction with mysqld must be made via Unix sockets or named pipes.# Note that using this option without enabling named pipes on Windows# (via the &quot;enable-named-pipe&quot; option) will render mysqld useless!# #skip-networking# Replication Master Server (default)# binary logging is required for replicationlog-bin=mysql-bin# required unique id between 1 and 2^32 - 1# defaults to 1 if master-host is not set# but will not function as a master if omittedserver-id = 1# Replication Slave (comment out master section to use this)## To configure this host as a replication slave, you can choose between# two methods :## 1) Use the CHANGE MASTER TO command (fully described in our manual) -# the syntax is:## CHANGE MASTER TO MASTER_HOST=&lt;host&gt;, MASTER_PORT=&lt;port&gt;,# MASTER_USER=&lt;user&gt;, MASTER_PASSWORD=&lt;password&gt; ;## where you replace &lt;host&gt;, &lt;user&gt;, &lt;password&gt; by quoted strings and# &lt;port&gt; by the master&apos;s port number (3306 by default).## Example:## CHANGE MASTER TO MASTER_HOST=&apos;125.564.12.1&apos;, MASTER_PORT=3306,# MASTER_USER=&apos;joe&apos;, MASTER_PASSWORD=&apos;secret&apos;;## OR## 2) Set the variables below. However, in case you choose this method, then# start replication for the first time (even unsuccessfully, for example# if you mistyped the password in master-password and the slave fails to# connect), the slave will create a master.info file, and any later# change in this file to the variables&apos; values below will be ignored and# overridden by the content of the master.info file, unless you shutdown# the slave server, delete master.info and restart the slaver server.# For that reason, you may want to leave the lines below untouched# (commented) and instead use CHANGE MASTER TO (see above)## required unique id between 2 and 2^32 - 1# (and different from the master)# defaults to 2 if master-host is set# but will not function as a slave if omitted#server-id = 2## The replication master for this slave - required#master-host = &lt;hostname&gt;## The username the slave will use for authentication when connecting# to the master - required#master-user = &lt;username&gt;## The password the slave will authenticate with when connecting to# the master - required#master-password = &lt;password&gt;## The port the master is listening on.# optional - defaults to 3306#master-port = &lt;port&gt;## binary logging - not required for slaves, but recommended#log-bin=mysql-bin## binary logging format - mixed recommended #binlog_format=mixed# Point the following paths to different dedicated disks#tmpdir = /tmp/ #log-update = /path-to-dedicated-directory/hostname# Uncomment the following if you are using InnoDB tables#innodb_data_home_dir = /usr/local/mysql/data/#innodb_data_file_path = ibdata1:2000M;ibdata2:10M:autoextend#innodb_log_group_home_dir = /usr/local/mysql/data/# You can set .._buffer_pool_size up to 50 - 80 %# of RAM but beware of setting memory usage too high#innodb_buffer_pool_size = 384M#innodb_additional_mem_pool_size = 20M# Set .._log_file_size to 25 % of buffer pool size#innodb_log_file_size = 100M#innodb_log_buffer_size = 8M#innodb_flush_log_at_trx_commit = 1#innodb_lock_wait_timeout = 50[mysqldump]quickmax_allowed_packet = 16M[mysql]no-auto-rehash# Remove the next comment character if you are not familiar with SQL#safe-updates[myisamchk]key_buffer_size = 256Msort_buffer_size = 256Mread_buffer = 2Mwrite_buffer = 2M[mysqlhotcopy]interactive-timeout nginx.conf 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130#user nobody;worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; #log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; # &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; # &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server &#123; listen 80; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location / &#123; #root html; #index index.html index.htm; fastcgi_pass 127.0.0.1:5000; fastcgi_param PATH_INFO $fastcgi_script_name; fastcgi_param REQUEST_METHOD $request_method; fastcgi_param QUERY_STRING $query_string; fastcgi_param CONTENT_TYPE $content_type; fastcgi_param CONTENT_LENGTH $content_length; fastcgi_param SERVER_ADDR $server_addr; fastcgi_param SERVER_PORT $server_port; fastcgi_param SERVER_NAME $server_name; fastcgi_param SERVER_PROTOCOL $server_protocol; fastcgi_pass_header Authorization; fastcgi_intercept_errors off; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \\.php$ &#123; # proxy_pass http://127.0.0.1; #&#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \\.php$ &#123; # root html; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; # include fastcgi_params; #&#125; # deny access to .htaccess files, if Apache&apos;s document root # concurs with nginx&apos;s one # #location ~ /\\.ht &#123; # deny all; #&#125; &#125; # another virtual host using mix of IP-, name-, and port-based configuration # #server &#123; # listen 8000; # listen somename:8080; # server_name somename alias another.alias; # location / &#123; # root html; # index index.html index.htm; # &#125; #&#125; # HTTPS server # #server &#123; # listen 443; # server_name localhost; # ssl on; # ssl_certificate cert.pem; # ssl_certificate_key cert.key; # ssl_session_timeout 5m; # ssl_protocols SSLv2 SSLv3 TLSv1; # ssl_ciphers HIGH:!aNULL:!MD5; # ssl_prefer_server_ciphers on; # location / &#123; # root html; # index index.html index.htm; # &#125; #&#125;&#125; development.ini myweb工程的配置文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172## myweb - Pylons development environment configuration## The %(here)s variable will be replaced with the parent directory of this file#[DEFAULT]debug = true# Uncomment and replace with the address which should receive any error reports#email_to = you@yourdomain.comsmtp_server = localhosterror_email_from = paste@localhost[server:main]use = egg:Flup#fcgi_threadhost = 127.0.0.1port = 5000[app:main]use = egg:mywebfull_stack = truestatic_files = truecache_dir = %(here)s/databeaker.session.key = mywebbeaker.session.secret = somesecret# If you&apos;d like to fine-tune the individual locations of the cache data dirs# for the Cache data, or the Session saves, un-comment the desired settings# here:#beaker.cache.data_dir = %(here)s/data/cache#beaker.session.data_dir = %(here)s/data/sessions# WARNING: *THE LINE BELOW MUST BE UNCOMMENTED ON A PRODUCTION ENVIRONMENT*# Debug mode will enable the interactive debugging tool, allowing ANYONE to# execute malicious code after an exception is raised.#set debug = false# Logging configuration[loggers]keys = root, routes, myweb[handlers]keys = console[formatters]keys = generic[logger_root]level = INFOhandlers = console[logger_routes]level = INFOhandlers =qualname = routes.middleware# &quot;level = DEBUG&quot; logs the route matched and routing variables.[logger_myweb]level = DEBUGhandlers =qualname = myweb[handler_console]class = StreamHandlerargs = (sys.stderr,)level = NOTSETformatter = generic[formatter_generic]format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] [%(threadName)s] %(message)sdatefmt = %H:%M:%S rc.nginx nginx启动脚本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158#!/bin/sh### BEGIN INIT INFO# Provides: nginx# Required-Start: # Should-Start: # Required-Stop: # Default-Start: 2 3 4 5# Default-Stop: 0 1 6# Short-Description: start and stop nginx# Description: ### END INIT INFO# SamERP start/stop script.service_startup_timeout=20# Set some defaultsnginxdir=/usr/local/nginxpid_file=$nginxdir/nginx-`/bin/hostname`.pidout_file=$nginxdir/runtime.out## Use LSB init script functions for printing messages, if possible#lsb_functions=&quot;/lib/lsb/init-functions&quot;if test -f $lsb_functions ; then . $lsb_functionselse log_success_msg() &#123; echo &quot; SUCCESS! $@&quot; &#125; log_failure_msg() &#123; echo &quot; ERROR! $@&quot; &#125;fimode=$1 # start or stopshiftother_args=&quot;$*&quot; # uncommon, but needed when called from an RPM upgrade action # Expected: &quot;--skip-networking --skip-grant-tables&quot; # They are not checked here, intentionally, as it is the resposibility # of the &quot;spec&quot; file author to give correct arguments only.case `echo &quot;testing\\c&quot;`,`echo -n testing` in *c*,-n*) echo_n= echo_c= ;; *c*,*) echo_n=-n echo_c= ;; *) echo_n= echo_c=&apos;\\c&apos; ;;esacwait_for_pid () &#123; verb=&quot;$1&quot; manager_pid=&quot;$2&quot; # process ID of the program operating on the pid-file i=0 avoid_race_condition=&quot;by checking again&quot; while test $i -ne $service_startup_timeout ; do case &quot;$verb&quot; in &apos;created&apos;) # wait for a PID-file to pop into existence. test -s $pid_file &amp;&amp; i=&apos;&apos; &amp;&amp; break ;; &apos;removed&apos;) # wait for this PID-file to disappear test ! -s $pid_file &amp;&amp; i=&apos;&apos; &amp;&amp; break ;; *) echo &quot;wait_for_pid () usage: wait_for_pid created|removed manager_pid&quot; exit 1 ;; esac echo $echo_n &quot;.$echo_c&quot; i=`expr $i + 1` sleep 1 done if test -z &quot;$i&quot; ; then log_success_msg return 0 else log_failure_msg return 1 fi&#125;case &quot;$mode&quot; in &apos;start&apos;) # Start daemon echo $echo_n &quot;Starting Nginx...&quot; echo $echo_n $echo_c if test -n &quot;$other_args&quot; then log_failure_msg &quot;Nginx does not support options &apos;$other_args&apos;&quot; exit 1 fi if test -s &quot;$pid_file&quot; then log_failure_msg &quot;Nginx process is already running, stop it first&quot; #$0 stop exit 1 fi $nginxdir/sbin/nginx &amp; nginxpid=`expr $! + 2` echo $nginxpid &gt; $pid_file wait_for_pid created $!; return_value=$? exit $return_value ;; &apos;stop&apos;) # Stop daemon. if test -s &quot;$pid_file&quot; then nginx_pid=`cat $pid_file` if (kill -0 $nginx_pid 2&gt;/dev/null) then echo $echo_n &quot;Shutting down Nginx...&quot; kill $nginx_pid rm -f $pid_file $out_file wait_for_pid removed &quot;$nginx_pid&quot;; return_value=$? else log_failure_msg &quot;Nginx process #$nginx_pid is not running!&quot; rm -f $pid_file $out_file fi exit $return_value else log_failure_msg &quot;Nginx PID file could not be found!&quot; fi ;; &apos;restart&apos;) # Stop the service and regardless of whether it was # running or not, start it again. if $0 stop $other_args; then $0 start $other_args else log_failure_msg &quot;Failed to stop running nginx, so refusing to try to start.&quot; exit 1 fi ;; *) # usage echo &quot;Usage: $0 &#123;start|stop|restart&#125; [ Nginx server options ]&quot; exit 1 ;;esacexit 0 rc.myweb myweb启动脚本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160#!/bin/sh### BEGIN INIT INFO# Provides: myweb# Required-Start: # Should-Start: # Required-Stop: # Default-Start: 2 3 4 5# Default-Stop: 0 1 6# Short-Description: start and stop myweb# Description: ### END INIT INFO# myweb start/stop script.service_startup_timeout=20# Set some defaultsmywebdir=/root/mywebpylonsdir=/usr/local/python2pid_file=$mywebdir/myweb-`/bin/hostname`.pidout_file=$mywebdir/runtime.out## Use LSB init script functions for printing messages, if possible#lsb_functions=&quot;/lib/lsb/init-functions&quot;if test -f $lsb_functions ; then . $lsb_functionselse log_success_msg() &#123; echo &quot; SUCCESS! $@&quot; &#125; log_failure_msg() &#123; echo &quot; ERROR! $@&quot; &#125;fimode=$1 # start or stopshiftother_args=&quot;$*&quot; # uncommon, but needed when called from an RPM upgrade action # Expected: &quot;--skip-networking --skip-grant-tables&quot; # They are not checked here, intentionally, as it is the resposibility # of the &quot;spec&quot; file author to give correct arguments only.case `echo &quot;testing\\c&quot;`,`echo -n testing` in *c*,-n*) echo_n= echo_c= ;; *c*,*) echo_n=-n echo_c= ;; *) echo_n= echo_c=&apos;\\c&apos; ;;esacwait_for_pid () &#123; verb=&quot;$1&quot; manager_pid=&quot;$2&quot; # process ID of the program operating on the pid-file i=0 avoid_race_condition=&quot;by checking again&quot; while test $i -ne $service_startup_timeout ; do case &quot;$verb&quot; in &apos;created&apos;) # wait for a PID-file to pop into existence. test -s $pid_file &amp;&amp; i=&apos;&apos; &amp;&amp; break ;; &apos;removed&apos;) # wait for this PID-file to disappear test ! -s $pid_file &amp;&amp; i=&apos;&apos; &amp;&amp; break ;; *) echo &quot;wait_for_pid () usage: wait_for_pid created|removed manager_pid&quot; exit 1 ;; esac echo $echo_n &quot;.$echo_c&quot; i=`expr $i + 1` sleep 1 done if test -z &quot;$i&quot; ; then log_success_msg return 0 else log_failure_msg return 1 fi&#125;case &quot;$mode&quot; in &apos;start&apos;) # Start daemon echo $echo_n &quot;Starting myweb...&quot; echo $echo_n $echo_c if test -n &quot;$other_args&quot; then log_failure_msg &quot;myweb does not support options &apos;$other_args&apos;&quot; exit 1 fi if test -s &quot;$pid_file&quot; then log_failure_msg &quot;myweb process is already running, stop it first&quot; #$0 stop exit 1 fi export PATH=$pylonsdir/bin:$PATH cd $mywebdir paster serve --reload development.ini &amp; echo $! &gt; $pid_file wait_for_pid created $!; return_value=$? exit $return_value ;; &apos;stop&apos;) # Stop daemon. if test -s &quot;$pid_file&quot; then myweb_pid=`cat $pid_file` if (kill -0 $myweb_pid 2&gt;/dev/null) then echo $echo_n &quot;Shutting down myweb...&quot; kill $myweb_pid rm -f $pid_file $out_file wait_for_pid removed &quot;$myweb_pid&quot;; return_value=$? else log_failure_msg &quot;myweb process #$myweb_pid is not running!&quot; rm -f $pid_file $out_file fi exit $return_value else log_failure_msg &quot;myweb PID file could not be found!&quot; fi ;; &apos;restart&apos;) # Stop the service and regardless of whether it was # running or not, start it again. if $0 stop $other_args; then $0 start $other_args else log_failure_msg &quot;Failed to stop running myweb, so refusing to try to start.&quot; exit 1 fi ;; *) # usage echo &quot;Usage: $0 &#123;start|stop|restart&#125; [ myweb server options ]&quot; exit 1 ;;esacexit 0 3. 安装脚本 setup 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141#!/bin/shFLAG_CP=FLAG_CPR=-rFLAG_TAR=-xfFLAG_CFG=\\&gt;/dev/nullFLAG_MAKE=\\&gt;/dev/nullFLAG_INST=\\&gt;/dev/nulltoolsdir=/root/toolsbuilddir=/root/tools/build#创建相关文件夹echo &quot;正在创建相关文件夹......&quot;mkdir $toolsdirmkdir $builddir#拷贝所有文件到指定目录echo &quot;正在拷贝文件到指定目录......&quot;cp $FLAG_CP ./*.* $toolsdir/#安装opensslecho &quot;正在安装openssl......&quot;cd $builddir/tar $FLAG_TAR $toolsdir/openssl-*.*cd openssl*/eval ./config $FLAG_CFGeval make $FLAG_MAKEeval make install $FLAG_MAKEldconfig#安装sqliteecho &quot;正在安装sqlite......&quot;cd $builddir/tar $FLAG_TAR $toolsdir/sqlite-*.*cd sqlite*/eval ./configure $FLAG_CFGeval make $FLAG_MAKEeval make install $FLAG_MAKE#ldconfig#安装zlib和pythonecho &quot;正在安装zlib......&quot;cd $builddir/tar $FLAG_TAR $toolsdir/Python-*.*cd Python*/Modules/zlib/eval ./configure $FLAG_CFGeval make $FLAG_MAKEeval make install $FLAG_MAKEecho &quot;正在安装python......&quot;cd $builddir/cd Python*/eval ./configure --prefix=/usr/local/python2 $FLAG_CFGeval make $FLAG_MAKEeval make install $FLAG_MAKEexport PATH=/usr/local/python2/bin:$PATH#安装setuptoolsecho &quot;正在安装setuptools......&quot;cd $builddir/tar $FLAG_TAR $toolsdir/setuptools-*.*cd setuptools*/eval python setup.py install $FLAG_INST#安装readlineecho &quot;正在安装readline......&quot;cd $builddir/tar $FLAG_TAR $toolsdir/readline-*.*cd readline*/eval python setup.py install $FLAG_INST#安装PyXMLecho &quot;正在安装PyXML......&quot;cd $builddir/tar $FLAG_TAR $toolsdir/PyXML-*.*cd PyXML*/eval python setup.py install $FLAG_INST#安装mysqlecho &quot;正在安装mysql......&quot;cd $builddir/tar $FLAG_TAR $toolsdir/mysql-*.*cp $FLAG_CPR mysql*/ /usr/local/mysqlcd /usr/local/mysqlgroupadd mysqluseradd -g mysql mysqlchown -R root:mysql ../scripts/mysql_install_db --user=mysqlecho &quot;正在启动mysql......&quot;#启动mysql、并修改root密码cp $toolsdir/mysql.cfg /etc/my.cnf./support-files/mysql.server start./bin/mysqladmin -u root password &apos;hahaha&apos;chown -R mysql data#指定mysql为开机启动ln -s /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql#update-rc.d mysql defaultschkconfig -a mysql#链接必要的lib*.so文件ln -s /usr/local/mysql/lib/libmysqlclient_r.so.16 /usr/lib/#安装pcreecho &quot;正在安装pcre......&quot;cd $builddir/tar $FLAG_TAR $toolsdir/pcre-*.*cd pcre*/eval ./configure $FLAG_CFGeval make $FLAG_MAKEeval make install $FLAG_MAKE#安装nginxecho &quot;正在安装nginx......&quot;cd $builddir/tar $FLAG_TAR $toolsdir/nginx-*.*cd nginx*/eval ./configure $FLAG_CFGeval make $FLAG_MAKEeval make install $FLAG_MAKEcp -f $toolsdir/nginx.conf /usr/local/nginx/conf/cp -f $toolsdir/rc.nginx /etc/init.d/nginxchkconfig -a nginxecho &quot;正在启动nginx......&quot;service nginx start#拷贝pylonsecho &quot;正在部署pylons......&quot;cd $builddir/tar $FLAG_TAR $toolsdir/python2*.*cp -fr python2/ /usr/local/#echo &quot;是否在/root目录下创建基本工程myweb,(Y/y or N/n)?&quot;#read tmp#创建基本工程mywebcd /rootpaster create -t pylons mywebcp -f $toolsdir/development.ini /root/myweb/cp $toolsdir/rc.myweb /etc/init.d/mywebchkconfig -a mywebecho &quot;正在启动myweb......&quot;service myweb startecho &quot;安装过程全部结束，可以通过nginx访问myweb......&quot; 4. 说明文件 readme 1234567891011121314151617 lnmp l - linux n - nginx m - mysql p - python/pylons target os: suse linux base on: gcc g++ bzip ncurses-devel setup tar xvf lnmp_tools.tar.gz cd lnmp_tools/ ./setup test myweb: the sample project","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"SuSE","slug":"SuSE","permalink":"http://my.fanzicai.com/tags/SuSE/"},{"name":"Python","slug":"Python","permalink":"http://my.fanzicai.com/tags/Python/"},{"name":"Linux","slug":"Linux","permalink":"http://my.fanzicai.com/tags/Linux/"},{"name":"Pylons","slug":"Pylons","permalink":"http://my.fanzicai.com/tags/Pylons/"},{"name":"2014","slug":"2014","permalink":"http://my.fanzicai.com/tags/2014/"},{"name":"Nginx","slug":"Nginx","permalink":"http://my.fanzicai.com/tags/Nginx/"},{"name":"MySQL","slug":"MySQL","permalink":"http://my.fanzicai.com/tags/MySQL/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"Debian系统安装Python的MySQLdb库","slug":"Debian系统安装Python的MySQLdb库","date":"2014-06-14T01:10:00.000Z","updated":"2023-02-23T09:21:06.740Z","comments":false,"path":"Program/20140614-Debian系统安装Python的MySQLdb库.html","link":"","permalink":"http://my.fanzicai.com/Program/20140614-Debian系统安装Python的MySQLdb库.html","excerpt":"Python访问MySQL数据库有很多可用的插件，本文选用的是MySQL-Python。","text":"Python访问MySQL数据库有很多可用的插件，本文选用的是MySQL-Python。 1. 安装环境 MySQL 5.1 Python 2.6.5 2. MySQLdb 安装包 MySQL-python-1.2.3c1.tar.gzsetuptools-0.6c11.tar.gz Setuptools 安装 12python setup.py buildsudo python setup.py install MySQLdb 编辑site.cfg 1mysql_config = /usr/bin/mysql_config 找到本机中的mysql_config路径安装12python setup.py buildpython setup.py install 测试python命令行下1import MySQLdb","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://my.fanzicai.com/tags/Python/"},{"name":"2014","slug":"2014","permalink":"http://my.fanzicai.com/tags/2014/"},{"name":"Debian","slug":"Debian","permalink":"http://my.fanzicai.com/tags/Debian/"},{"name":"MySQL","slug":"MySQL","permalink":"http://my.fanzicai.com/tags/MySQL/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"VC环境下回调函数的设计","slug":"VC环境下回调函数的设计","date":"2013-06-13T05:45:44.000Z","updated":"2023-02-23T09:21:06.736Z","comments":false,"path":"Program/20130613-VC环境下回调函数的设计.html","link":"","permalink":"http://my.fanzicai.com/Program/20130613-VC环境下回调函数的设计.html","excerpt":"本文描述回调函数的设计思路。","text":"本文描述回调函数的设计思路。 1. callback Callback.cpp 12345678910111213141516171819202122232425// Callback.cpp : Defines the entry point for the DLL application.//#include &quot;stdafx.h&quot;#include &quot;Callback.h&quot;BOOL APIENTRY DllMain( HANDLE hModule, DWORD ul_reason_for_call, LPVOID lpReserved )&#123; return TRUE;&#125;void RegisterCallbackFunc(void (*pFunc)(char*))&#123; pMyFunc = pFunc;&#125;void CallCallback()&#123; char pcBuf[] = &quot;调用回调函数\\n&quot;; (*pMyFunc)(pcBuf);&#125; Callback.h 123456789#ifndef _CALLBACK_H_#define _CALLBACK_H_void (*pMyFunc)(char*);void RegisterCallbackFunc(void (*pFunc)(char*));void CallCallback();#endif //_CALLBACK_H_ 2. TestCallback TestCallback.h 1234void RegisterCallbackFunc(void (*pFunc)(char*));void CallCallback();void MyFunc(char *pcBuf); TestCallback.cpp 12345678910111213141516171819// TestCallback.cpp : Defines the entry point for the console application.//#include &quot;stdafx.h&quot;#include &quot;TestCallback.h&quot;int main(int argc, char* argv[])&#123; RegisterCallbackFunc(MyFunc); CallCallback(); return 0;&#125;void MyFunc(char *pcBuf)&#123; printf(pcBuf);&#125;","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"2013","slug":"2013","permalink":"http://my.fanzicai.com/tags/2013/"},{"name":"Visual Studio","slug":"Visual-Studio","permalink":"http://my.fanzicai.com/tags/Visual-Studio/"},{"name":"C++","slug":"C","permalink":"http://my.fanzicai.com/tags/C/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"Linux-ARM环境Python调用C库","slug":"Linux-ARM环境Python调用C库","date":"2013-06-13T02:50:32.000Z","updated":"2023-02-23T09:21:06.736Z","comments":false,"path":"Program/20130613-Linux-ARM环境Python调用C库.html","link":"","permalink":"http://my.fanzicai.com/Program/20130613-Linux-ARM环境Python调用C库.html","excerpt":"Python调用C库，通常情况下采用ctypes模块。ARM环境下无法使用ctypes，需采用另外一种方式。","text":"Python调用C库，通常情况下采用ctypes模块。ARM环境下无法使用ctypes，需采用另外一种方式。 1. py2c工程本文的前提是已经在ARM环境编译安装Python。py2c工程，Makefile。 将python安装目录下的include，添加到Makefile中将python安装目录下的libs，添加到Makefile中 py2c.c 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697/* Example of embedding Python in another program */#include &quot;Python.h&quot;void initpy2c(void); /* Forward */static PyObject *py2cError;intmain(int argc, char **argv)&#123; /* Pass argv[0] to the Python interpreter */ Py_SetProgramName(argv[0]); /* Initialize the Python interpreter. Required. */ Py_Initialize(); /* Add a static module */ initpy2c(); /* Define sys.argv. It is up to the application if you want this; you can also let it undefined (since the Python code is generally not a main program it has no business touching sys.argv...) */ PySys_SetArgv(argc, argv); /* Do some application specific code */ printf(&quot;Hello, brave new world\\n\\n&quot;); /* Execute some Python statements (in module __main__) */ PyRun_SimpleString(&quot;import sys\\n&quot;); PyRun_SimpleString(&quot;print sys.builtin_module_names\\n&quot;); PyRun_SimpleString(&quot;print sys.modules.keys()\\n&quot;); PyRun_SimpleString(&quot;print sys.executable\\n&quot;); PyRun_SimpleString(&quot;print sys.argv\\n&quot;); /* Note that you can call any public function of the Python interpreter here, e.g. call_object(). */ /* Some more application specific code */ printf(&quot;\\nGoodbye, cruel world\\n&quot;); /* Exit, cleaning up the interpreter */ Py_Exit(0); return 0; /*NOTREACHED*/&#125;/* A static module *//* &apos;self&apos; is not used */static PyObject *py2c_test(PyObject *self, PyObject* args)&#123; const char *command; int sts; if (!PyArg_ParseTuple(args, &quot;s&quot;, &amp;command)) return NULL; sts = printf(command); if (sts &lt; 0) &#123; PyErr_SetString(py2cError, &quot;py2c test function failed!\\n&quot;); return NULL; &#125; printf(&quot;\\n&quot;); return Py_BuildValue(&quot;i&quot;, sts); //return PyInt_FromLong(sts);&#125;static PyMethodDef py2c_methods[] = &#123; &#123;&quot;test&quot;, py2c_test, METH_VARARGS, //METH_NOARGS, &quot;print string.&quot;&#125;, &#123;NULL, NULL&#125; /* sentinel */&#125;;voidinitpy2c(void)&#123; PyObject *m; PyImport_AddModule(&quot;py2c&quot;); m = Py_InitModule(&quot;py2c&quot;, py2c_methods); if(m==NULL) return; py2cError = PyErr_NewException(&quot;py2c.error&quot;, NULL, NULL); Py_INCREF(py2cError); PyModule_AddObject(m, &quot;error&quot;, py2cError); return;&#125; MakefileARM 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# Makefile for embedded Python use dispy2c.# (This version tailored for my Red Hat Linux 6.1 setup;# edit lines marked with XXX.)# XXX The compiler you are usingCC= arm-\\*\\*\\*-gcc# XXX Top of the build tree and source tree#blddir= ../..#srcdir= ../..libdir= /root/rootfs/usr/local/libsrcdir= /root/rootfs/usr/local/include# Python versionVERSION= 2.6 # or 2.7# Compiler flagsOPT= INCLUDES= -I$(srcdir)/python$(VERSION) -I$(srcdir)CFLAGS= $(OPT)CPPFLAGS= $(INCLUDES)# The Python libraryLIBPYTHON= $(libdir)/python2.6/config/libpython$(VERSION).aLIBEXTERN=#LIBEXTERN= ./*.a# XXX edit LIBS (in particular) to match $(blddir)/Modules/Makefile#LIBS= -lnsl -ldl -lreadline -ltermcap -lieee -lpthread -lutilLIBS= -lnsl -ldl -lieee -lpthread -lutilLDFLAGS= -Xlinker -export-dynamic -staticSYSLIBS= -lmMODLIBS= ALLLIBS= $(LIBPYTHON) $(LIBEXTERN) $(MODLIBS) $(LIBS) $(SYSLIBS)# Build the dispy2c applications#all: dispy2c.so#dispy2c: dispy2c.so# $(CC) $(LDFLAGS) dispy2c.o $(ALLLIBS) -o dispy2c dispy2c.so: dispy2c.o $(CC) $(CFLAGS) $(INCLUDES) -shared -fPIC -fvisibility=default -o dispy2c.so dispy2c.c $(LIBEXTERN) $(LIBPYTHON)dispy2c.o: dispy2c.c $(CC) $(CFLAGS) $(INCLUDES) -c dispy2c.c# Administrative targetstest: dispy2c ./dispy2cCOMMAND=&quot;print &apos;hello world&apos;&quot;clean: -rm -f *.o *.so dispy2cclobber: clean -rm -f *~ @* &apos;#&apos;* dispy2crealclean: clobber setup.py 123456789101112131415161718from distutils.core import setup, Extensionmodule1 = Extension(&apos;py2c&apos;, define_macros = [(&apos;MAJOR_VERSION&apos;, &apos;1&apos;), (&apos;MINOR_VERSION&apos;, &apos;0&apos;)], #include_dirs = [&apos;/usr/local/include&apos;], libraries = [&apos;libtest.a&apos;], #library_dirs = [&apos;./&apos;], sources = [&apos;py2c.c&apos;])setup (name = &apos;py2c&apos;, version = &apos;1.0&apos;, description = &apos;This is a py2c package&apos;, author = &apos;&apos;, author_email = &apos;&apos;, url = &apos;&apos;, long_description = &apos;This is really just a py2c package.&apos;, ext_modules = [module1]) 编译 1make -f MakefileARM 将py2c.so拷贝到python安装目录下的lib/python2.6/site-packages目录中。同时将x86环境下生成的py2c-1.0-py2.6.egg-info文件拷贝到python安装目录下的lib/python2.6/site-packages目录中 3. 使用py2c 将编译生成的py2c.dll文件改名为py2c.pyd，然后放到python安装目录下的DLLS目录中运行python1import py2c 4. py2c调用其他库本文中py2c_test函数还可以调用其他已有的C库的函数，相当于通过py2c调用现有的C库。 假设现有库为libtest.a保证libtest.a、ltest.h在py2c目录下Makefile中静态引用了py2c目录下的libtest.asetup.py中引用了py2c目录下的libtest.a","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://my.fanzicai.com/tags/Python/"},{"name":"2013","slug":"2013","permalink":"http://my.fanzicai.com/tags/2013/"},{"name":"Linux","slug":"Linux","permalink":"http://my.fanzicai.com/tags/Linux/"},{"name":"C","slug":"C","permalink":"http://my.fanzicai.com/tags/C/"},{"name":"ARM","slug":"ARM","permalink":"http://my.fanzicai.com/tags/ARM/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"Linux-ARM环境Python编译安装","slug":"Linux-ARM环境Python编译安装","date":"2013-06-13T02:42:52.000Z","updated":"2023-02-23T09:21:06.736Z","comments":false,"path":"Program/20130613-Linux-ARM环境Python编译安装.html","link":"","permalink":"http://my.fanzicai.com/Program/20130613-Linux-ARM环境Python编译安装.html","excerpt":"Python（英国发音：/ˈpaɪθən/ 美国发音：/ˈpaɪθɑːn/）, 是一种面向对象、解释型计算机程序设计语言，由Guido van Rossum于1989年发明，第一个公开发行版发行于1991年。Python是纯粹的自由软件， 源代码和解释器CPython遵循 GPL(GNU General Public License)协议。","text":"Python（英国发音：/ˈpaɪθən/ 美国发音：/ˈpaɪθɑːn/）, 是一种面向对象、解释型计算机程序设计语言，由Guido van Rossum于1989年发明，第一个公开发行版发行于1991年。Python是纯粹的自由软件， 源代码和解释器CPython遵循 GPL(GNU General Public License)协议。 1. Python2.6 1.1. 准备工作 源码包有： 12Python-2.6.5.tar.bz2sqlite-autoconf-3071700.tar.gz arm运行环境下的网络文件系统根目录1/root/rootfs 交叉编译环境1arm-***.tar.bz2 解压后目录为arm-***/将arm-***/bin目录添加到环境变量方法一：export PATH=$PATH:/解压目录/arm-***/bin方法二：/etc/profile文件末尾增加”PATH=$PATH:/解压目录/arm-***/bin” 1.2. zlib 12cd Python2.6.5/Modules/zlib./configure --prefix=/root/rootfs 修改Makefile将CC=gcc改为CC=arm-***-gcc12makemake install 1.3. sqlite 123tar xvf sqlite-autoconf-3071700.tar.gzcd sqlite-autoconf-3071700./configure --host=arm-none-linux-gnueabi --prefix=/root/rootfs --enable-shared --disable-readline --disable-dynamic-extensions 修改Makefilea. 将CFLAG的-g去掉b. 将CXXFLAG的-g去掉1make install 1.4. pgen 123456tar xvf Python-2.6.5.tar.bz2cd Python-2.6.5mkdir build.pccd build.pc../configuremake 1.5. configure修改 1cd Python-2.6.5 删除从“起始于”到”结束于“的内容起始于12&#123; echo &quot;$as_me:$LINENO: checking for %zd printf() format support&quot; &gt;&amp;5echo $ECHO_N &quot;checking for %zd printf() format support... $ECHO_C&quot; &gt;&amp;6; &#125; 结束于123firm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext conftest.$ac_objext conftest.$ac_extfi 1.6. Makefile生成 1234cd Python-2.6.5mkdir build.armcd build.arm../configure --host=arm-\\*\\*\\* --prefix=/root/rootfs --enable-shared –disable-ipv6 1.7. Makefile修改 1cd Python-2.6.5/build.arm 行OPT= -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes改为OPT= -DNDEBUG -fwrapv –O2 -Wall -Wstrict-prototypes 行PGEN= Parser/pgen$(EXE)下添加GEN_HOST = ../build.pc/Parser/pgen$(EXE)PYTHON_HOST= ../build.pc/python$(EXE) 在使用PGEN的地方改为PGEN_HOST，亦即123$(GRAMMAR_H) $(GRAMMAR_C): $(PGEN) $(GRAMMAR_INPUT) -@$(INSTALL) -d Include -$(PGEN) $(GRAMMAR_INPUT) $(GRAMMAR_H) $(GRAMMAR_C) 改为123$(GRAMMAR_H) $(GRAMMAR_C): $(PGEN) $(GRAMMAR_INPUT) -@$(INSTALL) -d Include -$(PGEN_HOST) $(GRAMMAR_INPUT) $(GRAMMAR_H) $(GRAMMAR_C) 所有的./$(BUILDPYTHON)都改为./$(PYTHON_HOST) 1.8. setup.py修改 行build_ext.build_extension(self, ext)后面加return 删除行12add_dir_to_list(self.compiler.library_dirs, &apos;/usr/local/lib&apos;)add_dir_to_list(self.compiler.include_dirs, &apos;/usr/local/include&apos;) 行lib_dirs = self.compiler.library_dirs + [‘/lib64’, ‘/usr/lib64’, ‘/lib’,’/usr/lib’,]改为lib_dirs = self.compiler.library_dirs + [] 行inc_dirs = self.compiler.include_dirs + [‘/usr/include’]改为inc_dirs = self.compiler.include_dirs + [] 行 for d in inc_dirs + sqlite_inc_paths:改为 for d in [‘/root/rootfs/include’]: Main函数中123scripts = [&apos;Tools/scripts/pydoc&apos;, &apos;Tools/scripts/idle&apos;, &apos;Tools/scripts/2to3&apos;, &apos;Lib/smtpd.py&apos;] 改为1scripts = [] 行disabled_module_list = []改为disabled_module_list = [‘_ctypes’] 行if (self.compiler.find_library_file(lib_dirs, ‘z’)):改为if (self.compiler.find_library_file([‘/root/rootfs/lib’], ‘z’)): 行zlib_extra_link_args = ()改为zlib_extra_link_args = (‘-L/root/rootfs/lib’,) 1.9. 解决Binascii和zlib问题 当/usr/local/lib/目录下有libz.a，libz.so两个文件时，将该两文件删除或者分别改名为libz.a.bak，libz.so.bak 1.10. 编译安装 123cd Python-2.6.5/build.armmakemake install 1.11. 精简Python cleanpy-2.6.sh 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#!/bin/shDELFILE=&quot; bin/idle bin/pydoc lib/python2.6/pydoc.pyo lib/python2.6/decimal.pyo lib/python2.6/doctest.pyo lib/python2.6/mailbox.pyo lib/python2.6/tarfile.pyo lib/python2.6/difflib.pyo lib/python2.6/imaplib.pyo lib/python2.6/gopherlib.pyo lib/python2.6/mhlib.pyo lib/python2.6/nntplib.pyo lib/python2.6/audiodev.pyo lib/python2.6/hashlib.pyo lib/python2.6/lib-dynload/audioop.so lib/python2.6/lib-dynload/_ctypes_test.so lib/python2.6/lib-dynload/_curses.so lib/python2.6/lib-dynload/_curses_panel.so lib/python2.6/lib-dynload/imageop.so lib/python2.6/lib-dynload/linuxaudiodev.so lib/python2.6/lib-dynload/ossaudiodev.so lib/python2.6/lib-dynload/rgbimg.so lib/python2.6/lib-dynload/_sha512.so lib/python2.6/lib-dynload/_sha256.so lib/python2.6/lib-dynload/pyexpat.so lib/python2.6/lib-dynload/Python-2.5.1.egg-info lib/python2.6/lib-dynload/_codecs_*.so lib/python2.6/lib-dynload/*_failed.so &quot;DELDIR=&quot; man lib/python2.6/lib-tk lib/python2.6/ctypes lib/python2.6/email lib/python2.6/lib2to3 lib/python2.6/xml lib/python2.6/json lib/python2.6/lib-old lib/python2.6/plat-linux2 lib/python2.6/curses lib/python2.6/idlelib/ lib/python2.6/test lib/python2.6/sqlite3/test lib/python2.6/bsddb/ lib/python2.6/distutils lib/python2.6/email/test/ lib/python2.6/ctypes/test/ &quot;for i in $DELFILE ;do [ -f $i ] &amp;&amp; echo &quot;exist file:&quot; $i &amp;&amp; rm -f $idoneechoechofor i in $DELDIR ;do [ -d $i ] &amp;&amp; echo &quot;exist dir:&quot; $i &amp;&amp; rm -rf $idonefind lib/python2.6 -name &apos;*.py&apos; -exec rm -f \\&#123;\\&#125; \\;find lib/python2.6 -name &apos;*.pyc&apos; -exec rm -f \\&#123;\\&#125; \\; 将cleanpy-2.6.sh拷贝到/root/rootfs/下，并运行即可 1.12. 运行Python 在ARM环境下，运行python之前执行export PYTHONHOME=/在执行python时，增加关键字-OO 1python -OO xxx.py 2. Python2.7 1.1. 准备工作 源码包有： 12Python-2.7.5.tgzPython-2.7.5-xcompile.patch arm运行环境下的网络文件系统根目录1/root/rootfs 交叉编译环境1arm-***.tar.bz2 解压后目录为arm-***/将arm-***/bin目录添加到环境变量方法一：export PATH=$PATH:/解压目录/arm-***/bin方法二：/etc/profile文件末尾增加”PATH=$PATH:/解压目录/arm-***/bin” 1.2. 解压 123export RFS=/root/rootfstar xvf Python-2.7.5.tgzcp XXX/Python-2.7.5-xcompile.patch Python-2.7.5/ 1.3. 编译x86工具 123456cd Python-2.7.5/./configuremake python Parser/pgenmv python python_for_buildmv Parser/pgen Parser/pgen_for_buildmake distclean 1.4. patch补丁 1patch –p 1 &lt; Python-2.7.5-xcompile.patch 运行后，根据提示输入要patch的文件 1.5. configure 1./configure --host=arm-none-linux-gnueabi --build=i686-linux-gnu --prefix=/ ac_cv_file__dev_ptmx=no ac_cv_file__dev_ptc=no ac_cv_have_long_long_format=yes 1.6. make 12make –jobs=8 CFLAGS=&quot;-g0 -Os -s -I$&#123;RFS&#125;/usr/include -fdata-sections -ffunction-sections&quot; LDFLAGS=&apos;-L$&#123;RFS&#125;/usr/lib -L$&#123;RFS&#125;/lib&apos;make install DESTDIR=$&#123;RFS&#125; PATH=”$&#123;PATH&#125;” 1.7. 精简Python cleanpy-2.7.sh 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#!/bin/shDELFILE=&quot; bin/idle bin/pydoc lib/python2.7/pydoc.pyo lib/python2.7/decimal.pyo lib/python2.7/doctest.pyo lib/python2.7/mailbox.pyo lib/python2.7/tarfile.pyo lib/python2.7/difflib.pyo lib/python2.7/imaplib.pyo lib/python2.7/gopherlib.pyo lib/python2.7/mhlib.pyo lib/python2.7/nntplib.pyo lib/python2.7/audiodev.pyo lib/python2.7/hashlib.pyo lib/python2.7/lib-dynload/audioop.so lib/python2.7/lib-dynload/_ctypes_test.so lib/python2.7/lib-dynload/_curses.so lib/python2.7/lib-dynload/_curses_panel.so lib/python2.7/lib-dynload/imageop.so lib/python2.7/lib-dynload/linuxaudiodev.so lib/python2.7/lib-dynload/ossaudiodev.so lib/python2.7/lib-dynload/rgbimg.so lib/python2.7/lib-dynload/_sha512.so lib/python2.7/lib-dynload/_sha256.so lib/python2.7/lib-dynload/pyexpat.so lib/python2.7/lib-dynload/Python-2.5.1.egg-info lib/python2.7/lib-dynload/_codecs_*.so lib/python2.7/lib-dynload/*_failed.so &quot;DELDIR=&quot; man lib/python2.7/lib-tk lib/python2.7/ctypes lib/python2.7/email lib/python2.7/lib2to3 lib/python2.7/xml lib/python2.7/json lib/python2.7/lib-old lib/python2.7/plat-linux2 lib/python2.7/curses lib/python2.7/idlelib/ lib/python2.7/test lib/python2.7/sqlite3/test lib/python2.7/bsddb/ lib/python2.7/distutils lib/python2.7/email/test/ lib/python2.7/ctypes/test/ &quot;for i in $DELFILE ;do [ -f $i ] &amp;&amp; echo &quot;exist file:&quot; $i &amp;&amp; rm -f $idoneechoechofor i in $DELDIR ;do [ -d $i ] &amp;&amp; echo &quot;exist dir:&quot; $i &amp;&amp; rm -rf $idonefind lib/python2.7 -name &apos;*.py&apos; -exec rm -f \\&#123;\\&#125; \\;find lib/python2.7 -name &apos;*.pyc&apos; -exec rm -f \\&#123;\\&#125; \\; 将cleanpy-2.6.sh拷贝到/root/rootfs/下，并运行即可 1.8. 运行Python 在ARM环境下，运行python之前执行export PYTHONHOME=/在执行python时，增加关键字-OO 1python -OO xxx.py","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://my.fanzicai.com/tags/Python/"},{"name":"2013","slug":"2013","permalink":"http://my.fanzicai.com/tags/2013/"},{"name":"Linux","slug":"Linux","permalink":"http://my.fanzicai.com/tags/Linux/"},{"name":"ARM","slug":"ARM","permalink":"http://my.fanzicai.com/tags/ARM/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"Linux-x86环境Python调用C库","slug":"Linux-x86环境Python调用C库","date":"2013-06-13T02:38:54.000Z","updated":"2023-02-23T09:21:06.736Z","comments":false,"path":"Program/20130613-Linux-x86环境Python调用C库.html","link":"","permalink":"http://my.fanzicai.com/Program/20130613-Linux-x86环境Python调用C库.html","excerpt":"Python调用C库，通常情况下采用ctypes模块。本文则采用另外一种方式。","text":"Python调用C库，通常情况下采用ctypes模块。本文则采用另外一种方式。 1. py2c工程py2c工程，Makefile。 将python安装目录下的include，添加到Makefile中将python安装目录下的libs，添加到Makefile中 py2c.c 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697/* Example of embedding Python in another program */#include &quot;Python.h&quot;void initpy2c(void); /* Forward */static PyObject *py2cError;intmain(int argc, char **argv)&#123; /* Pass argv[0] to the Python interpreter */ Py_SetProgramName(argv[0]); /* Initialize the Python interpreter. Required. */ Py_Initialize(); /* Add a static module */ initpy2c(); /* Define sys.argv. It is up to the application if you want this; you can also let it undefined (since the Python code is generally not a main program it has no business touching sys.argv...) */ PySys_SetArgv(argc, argv); /* Do some application specific code */ printf(&quot;Hello, brave new world\\n\\n&quot;); /* Execute some Python statements (in module __main__) */ PyRun_SimpleString(&quot;import sys\\n&quot;); PyRun_SimpleString(&quot;print sys.builtin_module_names\\n&quot;); PyRun_SimpleString(&quot;print sys.modules.keys()\\n&quot;); PyRun_SimpleString(&quot;print sys.executable\\n&quot;); PyRun_SimpleString(&quot;print sys.argv\\n&quot;); /* Note that you can call any public function of the Python interpreter here, e.g. call_object(). */ /* Some more application specific code */ printf(&quot;\\nGoodbye, cruel world\\n&quot;); /* Exit, cleaning up the interpreter */ Py_Exit(0); return 0; /*NOTREACHED*/&#125;/* A static module *//* &apos;self&apos; is not used */static PyObject *py2c_test(PyObject *self, PyObject* args)&#123; const char *command; int sts; if (!PyArg_ParseTuple(args, &quot;s&quot;, &amp;command)) return NULL; sts = printf(command); if (sts &lt; 0) &#123; PyErr_SetString(py2cError, &quot;py2c test function failed!\\n&quot;); return NULL; &#125; printf(&quot;\\n&quot;); return Py_BuildValue(&quot;i&quot;, sts); //return PyInt_FromLong(sts);&#125;static PyMethodDef py2c_methods[] = &#123; &#123;&quot;test&quot;, py2c_test, METH_VARARGS, //METH_NOARGS, &quot;print string.&quot;&#125;, &#123;NULL, NULL&#125; /* sentinel */&#125;;voidinitpy2c(void)&#123; PyObject *m; PyImport_AddModule(&quot;py2c&quot;); m = Py_InitModule(&quot;py2c&quot;, py2c_methods); if(m==NULL) return; py2cError = PyErr_NewException(&quot;py2c.error&quot;, NULL, NULL); Py_INCREF(py2cError); PyModule_AddObject(m, &quot;error&quot;, py2cError); return;&#125; Makefile 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# Makefile for embedded Python use py2c.# edit lines marked with XXX.)# XXX The compiler you are usingCC= gcc# XXX Top of the build tree and source tree#srcdir= ../..#blddir= ../..srcdir= /usr/local/includelibdir= /usr/local/lib# Python versionVERSION= 2.6# Compiler flagsOPT= -gINCLUDES= -I$(srcdir)/python$(VERSION) -I$(srcdir)CFLAGS= $(OPT)CPPFLAGS= $(INCLUDES)# The Python libraryLIBPYTHON= $(libdir)/libpython$(VERSION).aLIBEXTERN= #LIBEXTERN= ./*.a# XXX edit LIBS (in particular) to match $(blddir)/Modules/Makefile#LIBS= -lnsl -ldl -lreadline -ltermcap -lieee -lpthread -lutilLIBS= -lnsl -ldl -lieee -lpthread -lutilLDFLAGS= -Xlinker -export-dynamic -staticSYSLIBS= -lmMODLIBS= ALLLIBS= $(LIBPYTHON) $(LIBEXTERN) $(MODLIBS) $(LIBS) $(SYSLIBS)# Build the py2c applicationsall: clean py2cpy2c: py2c.o $(CC) $(LDFLAGS) py2c.o $(ALLLIBS) -o py2c # Administrative targetstest: py2c ./py2cCOMMAND=&quot;print &apos;hello world&apos;&quot;clean: -rm -f *.o *.so py2cclobber: clean -rm -f *~ @* &apos;#&apos;* py2crealclean: clobber setup.py 123456789101112131415161718from distutils.core import setup, Extensionmodule1 = Extension(&apos;py2c&apos;, define_macros = [(&apos;MAJOR_VERSION&apos;, &apos;1&apos;), (&apos;MINOR_VERSION&apos;, &apos;0&apos;)], #include_dirs = [&apos;/usr/local/include&apos;], #libraries = [&apos;***&apos;], #library_dirs = [&apos;./&apos;], sources = [&apos;py2c.c&apos;])setup (name = &apos;py2c&apos;, version = &apos;1.0&apos;, description = &apos;This is a py2c package&apos;, author = &apos;&apos;, author_email = &apos;&apos;, url = &apos;&apos;, long_description = &apos;This is really just a py2c package.&apos;, ext_modules = [module1]) 编译 12python setup.py buildpython setup.py install 2. 使用py2c 将编译生成的py2c.dll文件改名为py2c.pyd，然后放到python安装目录下的DLLS目录中运行python1import py2c 本文中py2c_test函数还可以调用其他已有的C库，相当于通过py2c调用现有的C库。","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://my.fanzicai.com/tags/Python/"},{"name":"2013","slug":"2013","permalink":"http://my.fanzicai.com/tags/2013/"},{"name":"Linux","slug":"Linux","permalink":"http://my.fanzicai.com/tags/Linux/"},{"name":"C","slug":"C","permalink":"http://my.fanzicai.com/tags/C/"},{"name":"x86","slug":"x86","permalink":"http://my.fanzicai.com/tags/x86/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"Windows环境Python调用C库","slug":"Windows环境Python调用C库","date":"2013-06-13T02:24:51.000Z","updated":"2023-02-23T09:21:06.736Z","comments":false,"path":"Program/20130613-Windows环境Python调用C库.html","link":"","permalink":"http://my.fanzicai.com/Program/20130613-Windows环境Python调用C库.html","excerpt":"Python调用C库，通常情况下采用ctypes模块。本文则采用另外一种方式。","text":"Python调用C库，通常情况下采用ctypes模块。本文则采用另外一种方式。 1. py2c工程采用VC创建“py2c”的dll工程。 将python安装目录下的include，添加到编译环境中将python安装目录下的libs，添加到编译环境中 py2c.c 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253// py2c.cpp : Defines the entry point for the DLL application.//#include &quot;stdafx.h&quot;#include &lt;Python.h&gt;#ifdef __cplusplusextern &quot;C&quot;&#123;#endif static PyObject *py2c_showMsg(PyObject *self, PyObject *args); __declspec(dllexport) void initpy2c() &#123; static PyMethodDef py2cMethods[] = &#123; &#123; &quot;showMsg&quot;, py2c_showMsg, METH_VARARGS &#125;, &#123; NULL, NULL, NULL &#125; &#125;; PyObject *py2c = Py_InitModule(&quot;py2c&quot;, py2cMethods); &#125; static PyObject *py2c_showMsg(PyObject *self, PyObject *args) &#123; const char *msg = NULL; if(!PyArg_ParseTuple(args,&quot;s&quot;,&amp;msg)) return NULL; int r = ::MessageBox(NULL, msg, &quot;Caption:Form C module&quot;, MB_ICONINFORMATION | MB_OK); return Py_BuildValue(&quot;i&quot;, r); &#125;#ifdef __cplusplus&#125;#endif#pragma comment(lib,&quot;python27.lib&quot;)BOOL APIENTRY DllMain( HANDLE hModule, DWORD ul_reason_for_call, LPVOID lpReserved )&#123; return TRUE;&#125; 编译 编译工程，生成py2c.dll 2. 使用py2c 将编译生成的py2c.dll文件改名为py2c.pyd，然后放到python安装目录下的DLLS目录中运行python12import py2cpy2c.showMsg(“test msg”) 运行结果，会弹出窗口显示“test msg”信息 本文为在其他环境下进行“Python调用C库”打下基础。","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://my.fanzicai.com/tags/Python/"},{"name":"2013","slug":"2013","permalink":"http://my.fanzicai.com/tags/2013/"},{"name":"C","slug":"C","permalink":"http://my.fanzicai.com/tags/C/"},{"name":"Windows","slug":"Windows","permalink":"http://my.fanzicai.com/tags/Windows/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"nginx中pylons的FCGI发布","slug":"nginx中pylons的FCGI发布","date":"2013-06-13T02:05:26.000Z","updated":"2023-02-23T09:21:06.740Z","comments":false,"path":"Program/20130613-nginx中pylons的FCGI发布.html","link":"","permalink":"http://my.fanzicai.com/Program/20130613-nginx中pylons的FCGI发布.html","excerpt":"Nginx (“engine x”) 是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP服务器。Nginx是由Igor Sysoev为俄罗斯访问量第二的Rambler.ru站点开发的，第一个公开版本0.1.0发布于2004年10月4日。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。","text":"Nginx (“engine x”) 是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP服务器。Nginx是由Igor Sysoev为俄罗斯访问量第二的Rambler.ru站点开发的，第一个公开版本0.1.0发布于2004年10月4日。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。 1. 安装环境 操作系统SuSE Linux 11, 2.6.32.12-0.7-pae Nginxnginx-1.5.1.tar.gz pcre 12345tar xvf pcre-8.02.tar.gzcd pcre-8.02/./configuremakemake install 2. Nginx 安装Nginx 12345tar xvf nginx-1.5.1.tar.gzcd nginx-1.5.1/./configuremakemake install 修改usr/local/ngnix/conf/nginx.conf 注释掉行44：root html;注释掉行45：index index.html index.htm;增加 1234fastcgi_pass 127.0.0.1:5000;fastcgi_param PATH_INFO $fastcgi_script_name;include fastcgi_params;fastcgi_intercept_errors off; 添加服务 /etc/init.d目录下创建nginx文件（启动脚本），用于执行/usr/local/nginx/sbin/nginx 1chkconfig nginx on 3. Pylons本文pylons可参照官网方式安装。 flup flup-1.0.3.dev-20110405.tar.gz 1234source pylons/bin/activatetar xvf flup-1.0.3.dev-20110405.tar.gzcd flup-1.0.3.dev-20110405python setup.py install development.ini 1234[server:main] use = egg:Flup#fcgi_thread host = 127.0.0.1 port = 5000 注：目前pylons已经被Pyramid替代，建议新的项目应采用Pyramid.","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"2013","slug":"2013","permalink":"http://my.fanzicai.com/tags/2013/"},{"name":"Pylons","slug":"Pylons","permalink":"http://my.fanzicai.com/tags/Pylons/"},{"name":"Pyramid","slug":"Pyramid","permalink":"http://my.fanzicai.com/tags/Pyramid/"},{"name":"Nginx","slug":"Nginx","permalink":"http://my.fanzicai.com/tags/Nginx/"},{"name":"FCGI","slug":"FCGI","permalink":"http://my.fanzicai.com/tags/FCGI/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"lighttpd中pylons的SCGI发布","slug":"lighttpd中pylons的SCGI发布","date":"2013-06-13T01:40:57.000Z","updated":"2023-02-23T09:21:06.736Z","comments":false,"path":"Program/20130613-lighttpd中pylons的SCGI发布.html","link":"","permalink":"http://my.fanzicai.com/Program/20130613-lighttpd中pylons的SCGI发布.html","excerpt":"Lighttpd 是一个德国人领导的开源Web服务器软件，其根本的目的是提供一个专门针对高性能网站，安全、快速、兼容性好并且灵活的web server环境。具有非常低的内存开销、cpu占用率低、效能好以及丰富的模块等特点。","text":"Lighttpd 是一个德国人领导的开源Web服务器软件，其根本的目的是提供一个专门针对高性能网站，安全、快速、兼容性好并且灵活的web server环境。具有非常低的内存开销、cpu占用率低、效能好以及丰富的模块等特点。 1. 安装环境 操作系统SuSE Linux 11, 2.6.32.12-0.7-pae LightTPDlighttpd-1.4.32 2. LightTPD 安装LightTPD 12345tar xvf lighttpd-1.4.32.tar.gzcd lighttpd-1.4.32/./configure --prefix=/usr/local/lighttpd --without-pcre --without-bzip2makemake install 添加服务 12cp doc/initscripts/rc.lighttpd /etc/init.d/lighttpdchkconfig lighttpd on 修改该文件，行351LIGHTTPD_BIN=/usr/local/lighttpd/sbin/lighttpd 配置文件 12345cp doc/initscripts/sysconfig.lighttpd /etc/sysconfig/lighttpdmkdir /etc/lighttpdcp doc/config/lighttpd.conf /etc/lighttpd/cp doc/config/modules.conf /etc/lighttpd/cp –r doc/config/conf.d/ /etc/lighttpd/ 配置修改 修改modules.conf，行127增加 1include “conf.d/scgi.conf” 修改lighttpd.conf，行127增加1server.bind = “0.0.0.0” 注释掉lighttpd.conf的315~317行，内容如下123#$HTTP[&quot;url&quot;] =~ &quot;\\.pdf$&quot; &#123;# server.range-requests = &quot;disable&quot;#&#125; 修改scgi.conf，增加内容12345678scgi.server = ( &quot;/&quot; =&gt; (( &quot;host&quot; =&gt; &quot;127.0.0.1&quot;, &quot;port&quot; =&gt; 5000, &quot;check-local&quot; =&gt; &quot;disable&quot;, &quot;docroot&quot; =&gt; &quot;/&quot; )) ) 运行服务 1server lighttpd start 3. Pylons本文pylons可参照官网方式安装。 flup flup-1.0.3.dev-20110405.tar.gz 1234source pylons/bin/activatetar xvf flup-1.0.3.dev-20110405.tar.gzcd flup-1.0.3.dev-20110405python setup.py install development.ini 1234[server:main] use = egg:PasteScript#flup_scgi_thread host = 127.0.0.1 port = 5000 注：目前pylons已经被Pyramid替代，建议新的项目应采用Pyramid.","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"2013","slug":"2013","permalink":"http://my.fanzicai.com/tags/2013/"},{"name":"LightTPD","slug":"LightTPD","permalink":"http://my.fanzicai.com/tags/LightTPD/"},{"name":"SCGI","slug":"SCGI","permalink":"http://my.fanzicai.com/tags/SCGI/"},{"name":"Pylons","slug":"Pylons","permalink":"http://my.fanzicai.com/tags/Pylons/"},{"name":"Pyramid","slug":"Pyramid","permalink":"http://my.fanzicai.com/tags/Pyramid/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]},{"title":"SuSE安装Apache及mod_python模块","slug":"SuSE安装Apache及mod-python模块","date":"2013-06-08T08:23:25.000Z","updated":"2023-02-23T09:21:06.736Z","comments":false,"path":"Program/20130608-SuSE安装Apache及mod-python模块.html","link":"","permalink":"http://my.fanzicai.com/Program/20130608-SuSE安装Apache及mod-python模块.html","excerpt":"本文在SuSE 11发行版上源码安装apache以及mod_python模块。","text":"本文在SuSE 11发行版上源码安装apache以及mod_python模块。 Apache本文采用httpd-2.2.19.tar.gz为例。 安装12345tar xvf httpd-2.2.19.tar.gzcd httpd*/./configure --prefix=/usr/local/apache --with-python=/usr/local/bin/pythonmakemake install 其中，指定了python的执行路径 运行1/usr/local/apache/bin/apachectl -k start mod_python本文以mod_python-3.3.1.tgz为例 安装12345tar xvf mod_python-3.3.1.tgzcd mod_python*./configure --with-apxs=/usr/local/apache/bin/apxs --with-python=/usr/local/bin/python2.6makemake install 编译中出现错误Connobject.c:142:error:request for member ‘next’ in something not a structure or union需修改mod_python-3.3.1/src/connobject.c文件“!(b==APR_BRIGADE_SENTINEL(b))”修改为：“!(b==APR_BRIGADE_SENTINEL(bb))” 配置 httpd.conf文件中增加 1LoadModule python_module /usr/local/apache/modules/mod_python.so 测试 apache/htdocs/目录下，添加文件test/mptest.py 12345from mod_python import apache def handler(req): req.write(&quot;Hello World!&quot;) return apache.OK httpd.conf配置 1234567891011&lt;Directory /usr/local/apache/htdocs/test&gt; AllowOverride FileInfo AddHandler mod_python .py #注意：mod_python与“.py”中间有空格 PythonHandler mptest PythonDebug On Order allow,deny Allow from all&lt;/Directory&gt;&lt;IfModule alias_module&gt; ScriptAlias /htdocs/test/ &quot;/usr/local/apache/htdocs/test/&quot;&lt;/IfModule&gt; 访问http://192.168.100.125:8080/test/mptest.py","categories":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}],"tags":[{"name":"SuSE","slug":"SuSE","permalink":"http://my.fanzicai.com/tags/SuSE/"},{"name":"Apache","slug":"Apache","permalink":"http://my.fanzicai.com/tags/Apache/"},{"name":"Python","slug":"Python","permalink":"http://my.fanzicai.com/tags/Python/"},{"name":"2013","slug":"2013","permalink":"http://my.fanzicai.com/tags/2013/"}],"keywords":[{"name":"Program","slug":"Program","permalink":"http://my.fanzicai.com/categories/Program/"}]}]}